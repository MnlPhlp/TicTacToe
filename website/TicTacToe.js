/* Generated by the Nim Compiler v0.19.4 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI141020 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI140971 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI139160 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI142068 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI142138 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI142164 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3862 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3852 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI140561 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3886 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3860 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI143060 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI143722 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI143723 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI167572 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178211 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI178207 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI178209 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI166684 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI3858 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI166678 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI3850 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3828 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3842 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3846 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI157441 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157437 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157433 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157429 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157425 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157421 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157417 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157413 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157409 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157405 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157401 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157397 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157393 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157389 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157385 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157381 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157377 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157373 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157369 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157365 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI157204 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI157276 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI157274 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI157220 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI157519 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI157517 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI157515 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI157224 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI157222 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI161297 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI161298 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI166752 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI166748 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI166150 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI166704 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI166692 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI166713 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI166711 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI166028 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI166705 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI166696 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI166739 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI166735 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI166730 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI166725 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI166721 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI166719 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI166698 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI178213 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI188231 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI188085 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI188080 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15346 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3918 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3912 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3826 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI139025 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI139017 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI139020 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI139018 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI143023 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI143024 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI143018 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
NTI143023.base = NTI104;
NTI143024.base = NTI143023;
var NNI143018 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "field", len: 0, typ: NTI143024, name: "field", sons: null}, 
{kind: 1, offset: "size", len: 0, typ: NTI104, name: "size", sons: null}]};
NTI143018.node = NNI143018;
var NNI139025 = {kind: 1, offset: "name", len: 0, typ: NTI138, name: "name", sons: null};
NTI139025.node = NNI139025;
var NNI3808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3808.node = NNI3808;
NTI139025.base = NTI3808;
NTI139017.base = NTI139025;
NTI139020.base = NTI139017;
var NNI139018 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "player_count", len: 0, typ: NTI104, name: "player_count", sons: null}, 
{kind: 1, offset: "players", len: 0, typ: NTI139020, name: "players", sons: null}, 
{kind: 1, offset: "current_player_number", len: 0, typ: NTI104, name: "current_player_number", sons: null}, 
{kind: 1, offset: "winner_player_number", len: 0, typ: NTI104, name: "winner_player_number", sons: null}]};
NTI139018.node = NNI139018;
NTI139018.base = NTI3808;
NTI143018.base = NTI139018;
NTI3912.base = NTI3826;
NTI3918.base = NTI3826;
var NNI3826 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3912, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raise_id", len: 0, typ: NTI114, name: "raise_id", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3918, name: "up", sons: null}]};
NTI3826.node = NNI3826;
NTI3826.base = NTI3808;
var NNI15346 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI15346.node = NNI15346;
var NNI166028 = {kind: 2, offset: 0, typ: null, name: null, len: 120, sons: {"0": {kind: 1, offset: 0, typ: NTI166028, name: "#text", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI166028, name: "#int", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI166028, name: "#bool", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI166028, name: "#vthunk", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI166028, name: "#dthunk", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI166028, name: "#component", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI166028, name: "#verbatim", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI166028, name: "html", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI166028, name: "head", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI166028, name: "title", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI166028, name: "base", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI166028, name: "link", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI166028, name: "meta", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI166028, name: "style", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI166028, name: "script", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI166028, name: "noscript", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI166028, name: "body", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI166028, name: "section", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI166028, name: "nav", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI166028, name: "article", len: 0, sons: null}, 
"20": {kind: 1, offset: 20, typ: NTI166028, name: "aside", len: 0, sons: null}, 
"21": {kind: 1, offset: 21, typ: NTI166028, name: "h1", len: 0, sons: null}, 
"22": {kind: 1, offset: 22, typ: NTI166028, name: "h2", len: 0, sons: null}, 
"23": {kind: 1, offset: 23, typ: NTI166028, name: "h3", len: 0, sons: null}, 
"24": {kind: 1, offset: 24, typ: NTI166028, name: "h4", len: 0, sons: null}, 
"25": {kind: 1, offset: 25, typ: NTI166028, name: "h5", len: 0, sons: null}, 
"26": {kind: 1, offset: 26, typ: NTI166028, name: "h6", len: 0, sons: null}, 
"27": {kind: 1, offset: 27, typ: NTI166028, name: "header", len: 0, sons: null}, 
"28": {kind: 1, offset: 28, typ: NTI166028, name: "footer", len: 0, sons: null}, 
"29": {kind: 1, offset: 29, typ: NTI166028, name: "address", len: 0, sons: null}, 
"30": {kind: 1, offset: 30, typ: NTI166028, name: "main", len: 0, sons: null}, 
"31": {kind: 1, offset: 31, typ: NTI166028, name: "p", len: 0, sons: null}, 
"32": {kind: 1, offset: 32, typ: NTI166028, name: "hr", len: 0, sons: null}, 
"33": {kind: 1, offset: 33, typ: NTI166028, name: "pre", len: 0, sons: null}, 
"34": {kind: 1, offset: 34, typ: NTI166028, name: "blockquote", len: 0, sons: null}, 
"35": {kind: 1, offset: 35, typ: NTI166028, name: "ol", len: 0, sons: null}, 
"36": {kind: 1, offset: 36, typ: NTI166028, name: "ul", len: 0, sons: null}, 
"37": {kind: 1, offset: 37, typ: NTI166028, name: "li", len: 0, sons: null}, 
"38": {kind: 1, offset: 38, typ: NTI166028, name: "dl", len: 0, sons: null}, 
"39": {kind: 1, offset: 39, typ: NTI166028, name: "dt", len: 0, sons: null}, 
"40": {kind: 1, offset: 40, typ: NTI166028, name: "dd", len: 0, sons: null}, 
"41": {kind: 1, offset: 41, typ: NTI166028, name: "figure", len: 0, sons: null}, 
"42": {kind: 1, offset: 42, typ: NTI166028, name: "figcaption", len: 0, sons: null}, 
"43": {kind: 1, offset: 43, typ: NTI166028, name: "div", len: 0, sons: null}, 
"44": {kind: 1, offset: 44, typ: NTI166028, name: "a", len: 0, sons: null}, 
"45": {kind: 1, offset: 45, typ: NTI166028, name: "em", len: 0, sons: null}, 
"46": {kind: 1, offset: 46, typ: NTI166028, name: "strong", len: 0, sons: null}, 
"47": {kind: 1, offset: 47, typ: NTI166028, name: "small", len: 0, sons: null}, 
"48": {kind: 1, offset: 48, typ: NTI166028, name: "s", len: 0, sons: null}, 
"49": {kind: 1, offset: 49, typ: NTI166028, name: "cite", len: 0, sons: null}, 
"50": {kind: 1, offset: 50, typ: NTI166028, name: "quote", len: 0, sons: null}, 
"51": {kind: 1, offset: 51, typ: NTI166028, name: "dfn", len: 0, sons: null}, 
"52": {kind: 1, offset: 52, typ: NTI166028, name: "abbr", len: 0, sons: null}, 
"53": {kind: 1, offset: 53, typ: NTI166028, name: "data", len: 0, sons: null}, 
"54": {kind: 1, offset: 54, typ: NTI166028, name: "time", len: 0, sons: null}, 
"55": {kind: 1, offset: 55, typ: NTI166028, name: "code", len: 0, sons: null}, 
"56": {kind: 1, offset: 56, typ: NTI166028, name: "var", len: 0, sons: null}, 
"57": {kind: 1, offset: 57, typ: NTI166028, name: "samp", len: 0, sons: null}, 
"58": {kind: 1, offset: 58, typ: NTI166028, name: "kdb", len: 0, sons: null}, 
"59": {kind: 1, offset: 59, typ: NTI166028, name: "sub", len: 0, sons: null}, 
"60": {kind: 1, offset: 60, typ: NTI166028, name: "sup", len: 0, sons: null}, 
"61": {kind: 1, offset: 61, typ: NTI166028, name: "i", len: 0, sons: null}, 
"62": {kind: 1, offset: 62, typ: NTI166028, name: "b", len: 0, sons: null}, 
"63": {kind: 1, offset: 63, typ: NTI166028, name: "u", len: 0, sons: null}, 
"64": {kind: 1, offset: 64, typ: NTI166028, name: "mark", len: 0, sons: null}, 
"65": {kind: 1, offset: 65, typ: NTI166028, name: "ruby", len: 0, sons: null}, 
"66": {kind: 1, offset: 66, typ: NTI166028, name: "rt", len: 0, sons: null}, 
"67": {kind: 1, offset: 67, typ: NTI166028, name: "rp", len: 0, sons: null}, 
"68": {kind: 1, offset: 68, typ: NTI166028, name: "bdi", len: 0, sons: null}, 
"69": {kind: 1, offset: 69, typ: NTI166028, name: "dbo", len: 0, sons: null}, 
"70": {kind: 1, offset: 70, typ: NTI166028, name: "span", len: 0, sons: null}, 
"71": {kind: 1, offset: 71, typ: NTI166028, name: "br", len: 0, sons: null}, 
"72": {kind: 1, offset: 72, typ: NTI166028, name: "wbr", len: 0, sons: null}, 
"73": {kind: 1, offset: 73, typ: NTI166028, name: "ins", len: 0, sons: null}, 
"74": {kind: 1, offset: 74, typ: NTI166028, name: "del", len: 0, sons: null}, 
"75": {kind: 1, offset: 75, typ: NTI166028, name: "img", len: 0, sons: null}, 
"76": {kind: 1, offset: 76, typ: NTI166028, name: "iframe", len: 0, sons: null}, 
"77": {kind: 1, offset: 77, typ: NTI166028, name: "embed", len: 0, sons: null}, 
"78": {kind: 1, offset: 78, typ: NTI166028, name: "object", len: 0, sons: null}, 
"79": {kind: 1, offset: 79, typ: NTI166028, name: "param", len: 0, sons: null}, 
"80": {kind: 1, offset: 80, typ: NTI166028, name: "video", len: 0, sons: null}, 
"81": {kind: 1, offset: 81, typ: NTI166028, name: "audio", len: 0, sons: null}, 
"82": {kind: 1, offset: 82, typ: NTI166028, name: "source", len: 0, sons: null}, 
"83": {kind: 1, offset: 83, typ: NTI166028, name: "track", len: 0, sons: null}, 
"84": {kind: 1, offset: 84, typ: NTI166028, name: "canvas", len: 0, sons: null}, 
"85": {kind: 1, offset: 85, typ: NTI166028, name: "map", len: 0, sons: null}, 
"86": {kind: 1, offset: 86, typ: NTI166028, name: "area", len: 0, sons: null}, 
"87": {kind: 1, offset: 87, typ: NTI166028, name: "svg", len: 0, sons: null}, 
"88": {kind: 1, offset: 88, typ: NTI166028, name: "math", len: 0, sons: null}, 
"89": {kind: 1, offset: 89, typ: NTI166028, name: "path", len: 0, sons: null}, 
"90": {kind: 1, offset: 90, typ: NTI166028, name: "circle", len: 0, sons: null}, 
"91": {kind: 1, offset: 91, typ: NTI166028, name: "table", len: 0, sons: null}, 
"92": {kind: 1, offset: 92, typ: NTI166028, name: "caption", len: 0, sons: null}, 
"93": {kind: 1, offset: 93, typ: NTI166028, name: "colgroup", len: 0, sons: null}, 
"94": {kind: 1, offset: 94, typ: NTI166028, name: "col", len: 0, sons: null}, 
"95": {kind: 1, offset: 95, typ: NTI166028, name: "tbody", len: 0, sons: null}, 
"96": {kind: 1, offset: 96, typ: NTI166028, name: "thead", len: 0, sons: null}, 
"97": {kind: 1, offset: 97, typ: NTI166028, name: "tfoot", len: 0, sons: null}, 
"98": {kind: 1, offset: 98, typ: NTI166028, name: "tr", len: 0, sons: null}, 
"99": {kind: 1, offset: 99, typ: NTI166028, name: "td", len: 0, sons: null}, 
"100": {kind: 1, offset: 100, typ: NTI166028, name: "th", len: 0, sons: null}, 
"101": {kind: 1, offset: 101, typ: NTI166028, name: "form", len: 0, sons: null}, 
"102": {kind: 1, offset: 102, typ: NTI166028, name: "fieldset", len: 0, sons: null}, 
"103": {kind: 1, offset: 103, typ: NTI166028, name: "legend", len: 0, sons: null}, 
"104": {kind: 1, offset: 104, typ: NTI166028, name: "label", len: 0, sons: null}, 
"105": {kind: 1, offset: 105, typ: NTI166028, name: "input", len: 0, sons: null}, 
"106": {kind: 1, offset: 106, typ: NTI166028, name: "button", len: 0, sons: null}, 
"107": {kind: 1, offset: 107, typ: NTI166028, name: "select", len: 0, sons: null}, 
"108": {kind: 1, offset: 108, typ: NTI166028, name: "datalist", len: 0, sons: null}, 
"109": {kind: 1, offset: 109, typ: NTI166028, name: "optgroup", len: 0, sons: null}, 
"110": {kind: 1, offset: 110, typ: NTI166028, name: "option", len: 0, sons: null}, 
"111": {kind: 1, offset: 111, typ: NTI166028, name: "textarea", len: 0, sons: null}, 
"112": {kind: 1, offset: 112, typ: NTI166028, name: "keygen", len: 0, sons: null}, 
"113": {kind: 1, offset: 113, typ: NTI166028, name: "output", len: 0, sons: null}, 
"114": {kind: 1, offset: 114, typ: NTI166028, name: "progress", len: 0, sons: null}, 
"115": {kind: 1, offset: 115, typ: NTI166028, name: "meter", len: 0, sons: null}, 
"116": {kind: 1, offset: 116, typ: NTI166028, name: "details", len: 0, sons: null}, 
"117": {kind: 1, offset: 117, typ: NTI166028, name: "summary", len: 0, sons: null}, 
"118": {kind: 1, offset: 118, typ: NTI166028, name: "command", len: 0, sons: null}, 
"119": {kind: 1, offset: 119, typ: NTI166028, name: "menu", len: 0, sons: null}}};
NTI166028.node = NNI166028;
NTI166711.base = NTI166696;
NTI166713.base = NTI140;
var NNI166150 = {kind: 2, offset: 0, typ: null, name: null, len: 31, sons: {"0": {kind: 1, offset: 0, typ: NTI166150, name: "onclick", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI166150, name: "oncontextmenu", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI166150, name: "ondblclick", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI166150, name: "onkeyup", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI166150, name: "onkeydown", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI166150, name: "onkeypressed", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI166150, name: "onfocus", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI166150, name: "onblur", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI166150, name: "onchange", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI166150, name: "onscroll", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI166150, name: "onmousedown", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI166150, name: "onmouseenter", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI166150, name: "onmouseleave", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI166150, name: "onmousemove", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI166150, name: "onmouseout", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI166150, name: "onmouseover", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI166150, name: "onmouseup", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI166150, name: "ondrag", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI166150, name: "ondragend", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI166150, name: "ondragenter", len: 0, sons: null}, 
"20": {kind: 1, offset: 20, typ: NTI166150, name: "ondragleave", len: 0, sons: null}, 
"21": {kind: 1, offset: 21, typ: NTI166150, name: "ondragover", len: 0, sons: null}, 
"22": {kind: 1, offset: 22, typ: NTI166150, name: "ondragstart", len: 0, sons: null}, 
"23": {kind: 1, offset: 23, typ: NTI166150, name: "ondrop", len: 0, sons: null}, 
"24": {kind: 1, offset: 24, typ: NTI166150, name: "onsubmit", len: 0, sons: null}, 
"25": {kind: 1, offset: 25, typ: NTI166150, name: "oninput", len: 0, sons: null}, 
"26": {kind: 1, offset: 26, typ: NTI166150, name: "onanimationstart", len: 0, sons: null}, 
"27": {kind: 1, offset: 27, typ: NTI166150, name: "onanimationend", len: 0, sons: null}, 
"28": {kind: 1, offset: 28, typ: NTI166150, name: "onanimationiteration", len: 0, sons: null}, 
"29": {kind: 1, offset: 29, typ: NTI166150, name: "onkeyupenter", len: 0, sons: null}, 
"30": {kind: 1, offset: 30, typ: NTI166150, name: "onkeyuplater", len: 0, sons: null}}};
NTI166150.node = NNI166150;
var NNI166704 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI166150, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI166748, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI166752, name: "Field2", sons: null}]};
NTI166704.node = NNI166704;
NTI166692.base = NTI166704;
var NNI161297 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI161297.node = NNI161297;
NTI161298.base = NTI161297;
NTI157515.base = NTI157222;
NTI157517.base = NTI157222;
NTI157519.base = NTI157222;
var NNI157220 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI157220, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI157220, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI157220, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI157220, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI157220, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI157220, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI157220, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI157220, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI157220, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI157220, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI157220, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI157220, name: "NotationNode", len: 0, sons: null}}};
NTI157220.node = NNI157220;
var NNI157276 = {kind: 2, len: 91, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "background", len: 0, typ: NTI140, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI140, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI140, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI140, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI140, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI140, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI140, name: "border", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI140, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI140, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI140, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI140, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI140, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI140, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI140, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI140, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI140, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI140, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI140, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI140, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI140, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI140, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI140, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI140, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI140, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI140, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI140, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI140, name: "bottom", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI140, name: "captionSide", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI140, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI140, name: "clip", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI140, name: "color", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI140, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI140, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI140, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI140, name: "emptyCells", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI140, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI140, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI140, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI140, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI140, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI140, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI140, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI140, name: "fontWeight", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI140, name: "height", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI140, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI140, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI140, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI140, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI140, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI140, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI140, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI140, name: "margin", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI140, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI140, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI140, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI140, name: "marginTop", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI140, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI140, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI140, name: "minHeight", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI140, name: "minWidth", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI140, name: "overflow", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI140, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI140, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI140, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI140, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI140, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI140, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI140, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI140, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI140, name: "position", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI140, name: "right", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI140, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI140, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI140, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI140, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI140, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI140, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI140, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI140, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI140, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI140, name: "textAlign", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI140, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI140, name: "textIndent", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI140, name: "textTransform", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI140, name: "transform", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI140, name: "top", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI140, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI140, name: "visibility", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI140, name: "width", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI140, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI104, name: "zIndex", sons: null}]};
NTI157276.node = NNI157276;
NTI157276.base = NTI3808;
NTI157274.base = NTI157276;
var NNI157224 = {kind: 2, len: 14, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI157515, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI157517, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI157519, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI140, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI157222, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI157222, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI157222, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI140, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI157220, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI140, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI157222, name: "parentNode", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI157222, name: "previousSibling", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI140, name: "innerHTML", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI157274, name: "style", sons: null}]};
NTI157224.node = NNI157224;
var NNI157204 = {kind: 2, len: 20, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI157365, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI157369, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI157373, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI157377, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI157381, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI157385, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI157389, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI157393, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI157397, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI157401, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI157405, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI157409, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI157413, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI157417, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI157421, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI157425, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI157429, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI157433, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI157437, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI157441, name: "onunload", sons: null}]};
NTI157204.node = NNI157204;
NTI157204.base = NTI3808;
NTI157224.base = NTI157204;
NTI157222.base = NTI157224;
var NNI166705 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "kind", len: 0, typ: NTI166028, name: "kind", sons: null}, 
{kind: 1, offset: "index", len: 0, typ: NTI104, name: "index", sons: null}, 
{kind: 1, offset: "id", len: 0, typ: NTI140, name: "id", sons: null}, 
{kind: 1, offset: "class", len: 0, typ: NTI140, name: "class", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI140, name: "text", sons: null}, 
{kind: 1, offset: "kids", len: 0, typ: NTI166711, name: "kids", sons: null}, 
{kind: 1, offset: "attrs", len: 0, typ: NTI166713, name: "attrs", sons: null}, 
{kind: 1, offset: "events", len: 0, typ: NTI166692, name: "events", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI161298, name: "style", sons: null}, 
{kind: 1, offset: "dom", len: 0, typ: NTI157222, name: "dom", sons: null}]};
NTI166705.node = NNI166705;
NTI166705.base = NTI3808;
NTI166696.base = NTI166705;
var NNI166719 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "key", len: 0, typ: NTI140, name: "key", sons: null}, 
{kind: 1, offset: "renderImpl", len: 0, typ: NTI166721, name: "renderImpl", sons: null}, 
{kind: 1, offset: "changedImpl", len: 0, typ: NTI166725, name: "changedImpl", sons: null}, 
{kind: 1, offset: "updatedImpl", len: 0, typ: NTI166730, name: "updatedImpl", sons: null}, 
{kind: 1, offset: "onAttachImpl", len: 0, typ: NTI166735, name: "onAttachImpl", sons: null}, 
{kind: 1, offset: "onDetachImpl", len: 0, typ: NTI166739, name: "onDetachImpl", sons: null}, 
{kind: 1, offset: "version", len: 0, typ: NTI104, name: "version", sons: null}, 
{kind: 1, offset: "renderedVersion", len: 0, typ: NTI104, name: "renderedVersion", sons: null}, 
{kind: 1, offset: "expanded", len: 0, typ: NTI166696, name: "expanded", sons: null}, 
{kind: 1, offset: "debugId", len: 0, typ: NTI104, name: "debugId", sons: null}]};
NTI166719.node = NNI166719;
NTI166719.base = NTI166705;
NTI166698.base = NTI166719;
var NNI178213 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "oldNode", len: 0, typ: NTI166698, name: "oldNode", sons: null}, 
{kind: 1, offset: "newNode", len: 0, typ: NTI166698, name: "newNode", sons: null}, 
{kind: 1, offset: "parent", len: 0, typ: NTI157222, name: "parent", sons: null}, 
{kind: 1, offset: "current", len: 0, typ: NTI157222, name: "current", sons: null}]};
NTI178213.node = NNI178213;
NTI188231.base = NTI178213;
var NNI3846 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3846.node = NNI3846;
var NNI3842 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3842.node = NNI3842;
var NNI3828 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3828.node = NNI3828;
NTI3828.base = NTI3826;
NTI3842.base = NTI3828;
NTI3846.base = NTI3842;
var NNI3850 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3850.node = NNI3850;
NTI3850.base = NTI3828;
NTI166678.base = NTI140;
var NNI3858 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3858.node = NNI3858;
NTI3858.base = NTI3828;
NTI166684.base = NTI140;
var NNI178207 = {kind: 2, offset: 0, typ: null, name: null, len: 5, sons: {"0": {kind: 1, offset: 0, typ: NTI178207, name: "pkReplace", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI178207, name: "pkRemove", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI178207, name: "pkAppend", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI178207, name: "pkInsertBefore", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI178207, name: "pkDetach", len: 0, sons: null}}};
NTI178207.node = NNI178207;
var NNI178209 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "k", len: 0, typ: NTI178207, name: "k", sons: null}, 
{kind: 1, offset: "parent", len: 0, typ: NTI157222, name: "parent", sons: null}, 
{kind: 1, offset: "current", len: 0, typ: NTI157222, name: "current", sons: null}, 
{kind: 1, offset: "n", len: 0, typ: NTI166696, name: "n", sons: null}]};
NTI178209.node = NNI178209;
var NNI178211 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI166696, name: "parent", sons: null}, 
{kind: 1, offset: "newChild", len: 0, typ: NTI166696, name: "newChild", sons: null}, 
{kind: 1, offset: "pos", len: 0, typ: NTI104, name: "pos", sons: null}]};
NTI178211.node = NNI178211;
NTI167572.base = NTI140;
NTI143722.base = NTI104;
NTI143723.base = NTI143722;
NTI143060.base = NTI138;
var NNI3860 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3860.node = NNI3860;
NTI3860.base = NTI3828;
var NNI3886 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3886.node = NNI3886;
NTI3886.base = NTI3828;
NTI140561.base = NTI138;
var NNI3852 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3852.node = NNI3852;
NTI3852.base = NTI3828;
var NNI3862 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3862.node = NNI3862;
NTI3862.base = NTI3828;
var NNI142164 = {kind: 1, offset: "depth", len: 0, typ: NTI104, name: "depth", sons: null};
NTI142164.node = NNI142164;
NTI142164.base = NTI139025;
NTI142138.base = NTI138;
NTI142068.base = NTI138;
NTI139160.base = NTI138;
NTI140971.base = NTI139017;
NTI141020.base = NTI138;

function cstrToNimstr(c_16242) {
		  var ln = c_16242.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_16242.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_16242.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_17230, src_17231, ti_17232) {
	var result_17655 = null;

		switch (ti_17232.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_17201(ti_17232))) {
			result_17655 = src_17231;
			}
			else {
				result_17655 = [src_17231[0], src_17231[1]];
			}
			
			break;
		case 19:
			      if (dest_17230 === null || dest_17230 === undefined) {
        dest_17230 = {};
      }
      else {
        for (var key in dest_17230) { delete dest_17230[key]; }
      }
      for (var key in src_17231) { dest_17230[key] = src_17231[key]; }
      result_17655 = dest_17230;
    
			break;
		case 18:
		case 17:
			if (!((ti_17232.base == null))) {
			result_17655 = nimCopy(dest_17230, src_17231, ti_17232.base);
			}
			else {
			if ((ti_17232.kind == 17)) {
			result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {m_type: ti_17232} : dest_17230;
			}
			else {
				result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {} : dest_17230;
			}
			}
			nimCopyAux(result_17655, src_17231, ti_17232.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_17231 === null) {
        result_17655 = null;
      }
      else {
        if (dest_17230 === null || dest_17230 === undefined) {
          dest_17230 = new Array(src_17231.length);
        }
        else {
          dest_17230.length = src_17231.length;
        }
        result_17655 = dest_17230;
        for (var i = 0; i < src_17231.length; ++i) {
          result_17655[i] = nimCopy(result_17655[i], src_17231[i], ti_17232.base);
        }
      }
    
			break;
		case 28:
			      if (src_17231 !== null) {
        result_17655 = src_17231.slice(0);
      }
    
			break;
		default: 
			result_17655 = src_17231;
			break;
		}

	return result_17655;

}

function makeNimstrLit(c_16225) {
		  var ln = c_16225.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_16225.charCodeAt(i);
  }
  return result;
  

	
}

function arrayConstr(len_17716, value_17717, typ_17718) {
		    var result = new Array(len_17716);
    for (var i = 0; i < len_17716; ++i) result[i] = nimCopy(null, value_17717, typ_17718);
    return result;
  

	
}

function toJSStr(s_16259) {
		  if (s_16259 === null) return "";
  var len = s_16259.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_16259[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_16259[i] < 128)
      asciiPart[i] = fcc(s_16259[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_15818, ename_15819) {
		e_15818.name = ename_15819;
		if ((excHandler == 0)) {
		unhandledException(e_15818);
		}
		
		e_15818.trace = nimCopy(null, raw_write_stack_trace_15655(), NTI138);
		throw e_15818;

	
}

function addInt(a_16603, b_16604) {
		    var result = a_16603 + b_16604;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
			var to_tag_166675 = nimCopy(null, ["#text", "#int", "#bool", "#vthunk", "#dthunk", "#component", "#verbatim", "HTML", "HEAD", "TITLE", "BASE", "LINK", "META", "STYLE", "SCRIPT", "NOSCRIPT", "BODY", "SECTION", "NAV", "ARTICLE", "ASIDE", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "FOOTER", "ADDRESS", "MAIN", "P", "HR", "PRE", "BLOCKQUOTE", "OL", "UL", "LI", "DL", "DT", "DD", "FIGURE", "FIGCAPTION", "DIV", "A", "EM", "STRONG", "SMALL", "S", "CITE", "QUOTE", "DFN", "ABBR", "DATA", "TIME", "CODE", "VAR", "SAMP", "KDB", "SUB", "SUP", "I", "B", "U", "MARK", "RUBY", "RT", "RP", "BDI", "DBO", "SPAN", "BR", "WBR", "INS", "DEL", "IMG", "IFRAME", "EMBED", "OBJECT", "PARAM", "VIDEO", "AUDIO", "SOURCE", "TRACK", "CANVAS", "MAP", "AREA", "SVG", "MATH", "PATH", "CIRCLE", "TABLE", "CAPTION", "COLGROUP", "COL", "TBODY", "THEAD", "TFOOT", "TR", "TD", "TH", "FORM", "FIELDSET", "LEGEND", "LABEL", "INPUT", "BUTTON", "SELECT", "DATALIST", "OPTGROUP", "OPTION", "TEXTAREA", "KEYGEN", "OUTPUT", "PROGRESS", "METER", "DETAILS", "SUMMARY", "COMMAND", "MENU"], NTI166678);

function chckIndx(i_17735, a_17736, b_17737) {
			var Tmp1;

	var result_17738 = 0;

	BeforeRet: do {
			if (!(a_17736 <= i_17735)) Tmp1 = false; else {				Tmp1 = (i_17735 <= b_17737);			}		if (Tmp1) {
		result_17738 = i_17735;
		break BeforeRet;
		}
		else {
		raiseIndexError();
		}
		
	} while (false);

	return result_17738;

}

function subInt(a_16621, b_16622) {
		    var result = a_16621 - b_16622;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
			var to_event_name_166681 = nimCopy(null, ["click", "contextmenu", "dblclick", "keyup", "keydown", "keypressed", "focus", "blur", "change", "scroll", "mousedown", "mouseenter", "mouseleave", "mousemove", "mouseout", "mouseover", "mouseup", "drag", "dragend", "dragenter", "dragleave", "dragover", "dragstart", "drop", "submit", "input", "animationstart", "animationend", "animationiteration", "keyupenter", "keyuplater"], NTI166684);

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}

function nimMin(a_16940, b_16941) {
		var Tmp1;

	var result_16942 = 0;

	BeforeRet: do {
		if ((a_16940 <= b_16941)) {
		Tmp1 = a_16940;
		}
		else {
		Tmp1 = b_16941;
		}
		
		result_16942 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_16942;

}

function eqStrings(a_16454, b_16455) {
		    if (a_16454 == b_16455) return true;
    if (a_16454 === null && b_16455.length == 0) return true;
    if (b_16455 === null && a_16454.length == 0) return true;
    if ((!a_16454) || (!b_16455)) return false;
    var alen = a_16454.length;
    if (alen != b_16455.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_16454[i] != b_16455[i]) return false;
    return true;
  

	
}

function mnewString(len_16276) {
		    return new Array(len_16276);
  

	
}
										var desc_143048 = nimCopy(null, [makeNimstrLit(" "), makeNimstrLit("X"), makeNimstrLit("0")], NTI143060);

function isObj(obj_17838, subclass_17839) {
	var result_17840 = false;

	BeforeRet: do {
		var x_17841 = obj_17838;
		if ((x_17841 == subclass_17839)) {
		result_17840 = true;
		break BeforeRet;
		}
		
		L1: do {
				L2: while (true) {
				if (!!((x_17841 == subclass_17839))) break L2;
					if ((x_17841 == null)) {
					result_17840 = false;
					break BeforeRet;
					}
					
					x_17841 = x_17841.base;
				}
		} while(false);
		result_17840 = true;
		break BeforeRet;
	} while (false);

	return result_17840;

}

function addChar(x_17889, c_17890) {
		x_17889.push(c_17890);

	
}
var ConstSet2 = setConstr([48, 57]);
var ConstSet3 = setConstr(0, 125);
var ConstSet4 = setConstr([48, 57]);
var ConstSet5 = setConstr([65, 90]);

function chckRange(i_17754, a_17755, b_17756) {
			var Tmp1;

	var result_17757 = 0;

	BeforeRet: do {
			if (!(a_17755 <= i_17754)) Tmp1 = false; else {				Tmp1 = (i_17754 <= b_17756);			}		if (Tmp1) {
		result_17757 = i_17754;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_17757;

}

function nimMax(a_16958, b_16959) {
		var Tmp1;

	var result_16960 = 0;

	BeforeRet: do {
		if ((b_16959 <= a_16958)) {
		Tmp1 = a_16958;
		}
		else {
		Tmp1 = b_16959;
		}
		
		result_16960 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_16960;

}
var ConstSet6 = setConstr([97, 122], [65, 90], [48, 57], [128, 255], 95);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr([48, 57]);

function mulInt(a_16639, b_16640) {
		    var result = a_16639 * b_16640;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function nimCharToStr(x_15262) {
	var result_15263 = null;

		result_15263 = nimCopy(null, mnewString(1), NTI138);
		result_15263[0] = x_15262;

	return result_15263;

}
var ConstSet9 = setConstr(13, 10);
var nimvm_7173 = false;
var nim_program_result = 0;
var global_raise_hook_13418 = [null];
var local_raise_hook_13423 = [null];
var out_of_mem_hook_13426 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var object_id_132246 = [0];
var gid_167472 = [0];
var vcomponents_171240 = [{}];
var kxi_178324 = [null];

function new_191003() {
	var result_191008 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_191201 = null;
		F.line = 211;
		r_191201 = {m_type: NTI143018, field: [new Int32Array(3), new Int32Array(3), new Int32Array(3)], size: 0, player_count: 0, players: null, current_player_number: 0, winner_player_number: 0};
		F.line = 212;
		result_191008 = r_191201;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191008;

}

function new_191229() {
	var result_191234 = null;

	var F={procname:"new.new",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 208;
		var r_191401 = null;
		F.line = 211;
		r_191401 = {name1: null, name2: null, ai: false};
		F.line = 212;
		result_191234 = r_191401;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_191234;

}
var game_191223 = new_191003();
var state_191225 = [0];
var message_191226 = ["Welcome"];
var settings_191423 = new_191229();

function is_fat_pointer_17201(ti_17203) {
	var result_17204 = false;

	BeforeRet: do {
		result_17204 = !((ConstSet1[ti_17203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_17204;

}

function nimCopyAux(dest_17235, src_17236, n_17238) {
		switch (n_17238.kind) {
		case 0:
			break;
		case 1:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
    
			break;
		case 2:
			L1: do {
				var i_17628 = 0;
				var colontmp__17630 = 0;
				colontmp__17630 = (n_17238.len - 1);
				var res_17633 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_17633 <= colontmp__17630)) break L3;
							i_17628 = res_17633;
							nimCopyAux(dest_17235, src_17236, n_17238.sons[i_17628]);
							res_17633 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
      for (var i = 0; i < n_17238.sons.length; ++i) {
        nimCopyAux(dest_17235, src_17236, n_17238.sons[i][1]);
      }
    
			break;
		}

	
}

function add_13438(x_13441, x_13441_Idx, y_13442) {
		      if (x_13441[x_13441_Idx] === null) { x_13441[x_13441_Idx] = []; }
      var off = x_13441[x_13441_Idx].length;
      x_13441[x_13441_Idx].length += y_13442.length;
      for (var i = 0; i < y_13442.length; ++i) {
        x_13441[x_13441_Idx][off+i] = y_13442.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_15341(f_15343) {
					var Tmp3;

	var result_15344 = [null];

		var it_15352 = f_15343;
		var i_15354 = 0;
		var total_15356 = 0;
		var temp_frames_15363 = arrayConstr(64, {Field0: null, Field1: 0}, NTI15346);
		L1: do {
				L2: while (true) {
					if (!!((it_15352 == null))) Tmp3 = false; else {						Tmp3 = (i_15354 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_15363[i_15354].Field0 = it_15352.procname;
					temp_frames_15363[i_15354].Field1 = it_15352.line;
					i_15354 += 1;
					total_15356 += 1;
					it_15352 = it_15352.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_15352 == null))) break L5;
					total_15356 += 1;
					it_15352 = it_15352.prev;
				}
		} while(false);
		result_15344[0] = nimCopy(null, [], NTI138);
		if (!((total_15356 == i_15354))) {
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit("(")); } else { result_15344[0] = makeNimstrLit("("); };
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(cstrToNimstr(((total_15356 - i_15354))+"")); } else { result_15344[0] = cstrToNimstr(((total_15356 - i_15354))+"").slice(); };
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_15344[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_15628 = 0;
			var colontmp__15635 = 0;
			colontmp__15635 = (i_15354 - 1);
			var res_15638 = colontmp__15635;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_15638)) break L8;
						j_15628 = res_15638;
						add_13438(result_15344, 0, temp_frames_15363[j_15628].Field0);
						if ((0 < temp_frames_15363[j_15628].Field1)) {
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit(", line: ")); } else { result_15344[0] = makeNimstrLit(", line: "); };
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(cstrToNimstr((temp_frames_15363[j_15628].Field1)+"")); } else { result_15344[0] = cstrToNimstr((temp_frames_15363[j_15628].Field1)+"").slice(); };
						}
						
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit("\x0A")); } else { result_15344[0] = makeNimstrLit("\x0A"); };
						res_15638 -= 1;
					}
			} while(false);
		} while(false);

	return result_15344[0];

}

function raw_write_stack_trace_15655() {
	var result_15657 = null;

		if (!((framePtr == null))) {
		result_15657 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A")).concat(aux_write_stack_trace_15341(framePtr)), NTI138);
		}
		else {
			result_15657 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_15657;

}

function unhandledException(e_15719) {
		var buf_15720 = [[]];
		if (!(((e_15719.message != null ? e_15719.message.length : 0) == 0))) {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(e_15719.message); } else { buf_15720[0] = e_15719.message.slice(); };
		}
		else {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit(" [")); } else { buf_15720[0] = makeNimstrLit(" ["); };
		add_13438(buf_15720, 0, e_15719.name);
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("]\x0A")); } else { buf_15720[0] = makeNimstrLit("]\x0A"); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(raw_write_stack_trace_15655()); } else { buf_15720[0] = raw_write_stack_trace_15655().slice(); };
		var cbuf_15801 = toJSStr(buf_15720[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_15801);
  }
  else {
    throw cbuf_15801;
  }
  

	
}

function new_seq_188127(len_188131) {
	var result_188133 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_188133 = new Array(len_188131); for (var i=0;i<len_188131;++i) {result_188133[i]={k: 0, parent: null, current: null, n: null};}	framePtr = F.prev;

	return result_188133;

}

function new_seq_188179(len_188183) {
	var result_188185 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_188185 = new Array(len_188183); for (var i=0;i<len_188183;++i) {result_188185[i]={parent: null, newChild: null, pos: 0};}	framePtr = F.prev;

	return result_188185;

}

function raiseOverflow() {
		var e_16065 = null;
		e_16065 = {m_type: NTI3846, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16065.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_16065.parent = null;
		raiseException(e_16065, "OverflowError");

	
}

function sys_fatal_20437(message_20443) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2915;
		var e_20445 = null;
		F.line = 2916;
		e_20445 = {m_type: NTI3850, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 2917;
		e_20445.message = nimCopy(null, message_20443, NTI138);
		F.line = 2918;
		raiseException(e_20445, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_20432(msg_20434) {
	var F={procname:"system.raiseAssert",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3872;
		sys_fatal_20437(msg_20434);
	framePtr = F.prev;

	
}

function failed_assert_impl_20481(msg_20483) {
	var F={procname:"system.failedAssertImpl",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3879;
		raise_assert_20432(msg_20483);
	framePtr = F.prev;

	
}

function raiseIndexError() {
		var e_16155 = null;
		e_16155 = {m_type: NTI3858, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16155.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
		e_16155.parent = null;
		raiseException(e_16155, "IndexError");

	
}

function valueHEX3D_166830(n_166832, v_166833) {
	var F={procname:"vdom.value=",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/vdom.nim",line:0};
	framePtr = F;
		F.line = 156;
		n_166832.text = v_166833;
	framePtr = F.prev;

	
}

function value_166813(n_166815) {
	var result_166816 = null;

	var F={procname:"vdom.value",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/vdom.nim",line:0};
	framePtr = F;
		F.line = 155;
		result_166816 = n_166815.text;
	framePtr = F.prev;

	return result_166816;

}

function wrap_event_178377(d_178379, n_178380, k_178381, action_178382) {

			function later_wrapper_178830() {

					function HEX3Aanonymous_178836(ev_178838) {

							function wrapper_178839() {
								var F={procname:":anonymous.wrapper",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
								framePtr = F;
									F.line = 72;
									var v_178844 = ev_178838.target.value;
									F.line = 73;
									valueHEX3D_166830(n_178834, v_178844);
									if (!(!((action_178833 == null)))) {
									F.line = 74;
									failed_assert_impl_20481(makeNimstrLit("/home/manuel/.nimble/pkgs/karax-1.1.0/karax/karax.nim(74, 10) `\x0Anot (action == nil)` "));
									}
									
									F.line = 75;
									action_178833(ev_178838, n_178834);
									if (!((value_166813(n_178834) == v_178844))) {
									F.line = 77;
									ev_178838.target.value = value_166813(n_178834);
									}
									
								framePtr = F.prev;

								
							}

						var F={procname:"laterWrapper.:anonymous",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
						framePtr = F;
							if (!((timer_178835 == null))) {
							F.line = 103;
							clearTimeout(timer_178835);
							}
							
							F.line = 104;
							timer_178835 = setTimeout(wrapper_178839, 400);
						framePtr = F.prev;

						
					}

				var result_178832 = null;

				var F={procname:"wrapEvent.laterWrapper",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
				framePtr = F;
					F.line = 98;
					var action_178833 = action_178382;
					F.line = 99;
					var n_178834 = n_178380;
					F.line = 100;
					var timer_178835 = null;
					F.line = 101;
					result_178832 = HEX3Aanonymous_178836;
				framePtr = F.prev;

				return result_178832;

			}

			function enter_wrapper_178629() {

					function HEX3Aanonymous_178634(ev_178636) {
						var F={procname:"enterWrapper.:anonymous",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
						framePtr = F;
							if ((ev_178636.keyCode == 13)) {
							F.line = 72;
							var v_178640 = ev_178636.target.value;
							F.line = 73;
							valueHEX3D_166830(n_178633, v_178640);
							if (!(!((action_178632 == null)))) {
							F.line = 74;
							failed_assert_impl_20481(makeNimstrLit("/home/manuel/.nimble/pkgs/karax-1.1.0/karax/karax.nim(74, 10) `\x0Anot (action == nil)` "));
							}
							
							F.line = 75;
							action_178632(ev_178636, n_178633);
							if (!((value_166813(n_178633) == v_178640))) {
							F.line = 77;
							ev_178636.target.value = value_166813(n_178633);
							}
							
							}
							
						framePtr = F.prev;

						
					}

				var result_178631 = null;

				var F={procname:"wrapEvent.enterWrapper",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
				framePtr = F;
					F.line = 92;
					var action_178632 = action_178382;
					F.line = 93;
					var n_178633 = n_178380;
					F.line = 94;
					result_178631 = HEX3Aanonymous_178634;
				framePtr = F.prev;

				return result_178631;

			}

			function std_wrapper_178384() {

					function HEX3Aanonymous_178389(ev_178391) {
								var Tmp1;
								var Tmp2;

						var F={procname:"stdWrapper.:anonymous",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
						framePtr = F;
								if ((n_178388.kind == 111)) Tmp2 = true; else {									Tmp2 = (n_178388.kind == 105);								}								if (Tmp2) Tmp1 = true; else {									Tmp1 = (n_178388.kind == 107);								}							if (Tmp1) {
							F.line = 72;
							var v_178422 = ev_178391.target.value;
							F.line = 73;
							valueHEX3D_166830(n_178388, v_178422);
							if (!(!((action_178387 == null)))) {
							F.line = 74;
							failed_assert_impl_20481(makeNimstrLit("/home/manuel/.nimble/pkgs/karax-1.1.0/karax/karax.nim(74, 10) `\x0Anot (action == nil)` "));
							}
							
							F.line = 75;
							action_178387(ev_178391, n_178388);
							if (!((value_166813(n_178388) == v_178422))) {
							F.line = 77;
							ev_178391.target.value = value_166813(n_178388);
							}
							
							}
							else {
								F.line = 89;
							action_178387(ev_178391, n_178388);
							}
							
						framePtr = F.prev;

						
					}

				var result_178386 = null;

				var F={procname:"wrapEvent.stdWrapper",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
				framePtr = F;
					F.line = 84;
					var action_178387 = action_178382;
					F.line = 85;
					var n_178388 = n_178380;
					F.line = 86;
					result_178386 = HEX3Aanonymous_178389;
				framePtr = F.prev;

				return result_178386;

			}

	var result_178383 = null;

	var F={procname:"karax.wrapEvent",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
	framePtr = F;
		F.line = 106;
		switch (k_178381) {
		case 30:
			F.line = 108;
			result_178383 = later_wrapper_178830();
			F.line = 109;
			d_178379.addEventListener("keyup", result_178383, false);
			break;
		case 29:
			F.line = 111;
			result_178383 = enter_wrapper_178629();
			F.line = 112;
			d_178379.addEventListener("keyup", result_178383, false);
			break;
		default: 
			F.line = 114;
			result_178383 = std_wrapper_178384();
			F.line = 115;
			d_178379.addEventListener(to_event_name_166681[chckIndx(k_178381, 0, to_event_name_166681.length+0-1)-0], result_178383, false);
			break;
		}
	framePtr = F.prev;

	return result_178383;

}

function apply_events_179078(n_179080) {
	var F={procname:"karax.applyEvents",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
	framePtr = F;
		F.line = 127;
		var dest_179081 = n_179080.dom;
		L1: do {
			F.line = 128;
			var i_179098 = 0;
			F.line = 3616;
			var colontmp__179100 = 0;
			F.line = 128;
			colontmp__179100 = (n_179080.events != null ? n_179080.events.length : 0);
			F.line = 3617;
			var i_179103 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_179103 < colontmp__179100)) break L3;
						F.line = 3619;
						i_179098 = i_179103;
						F.line = 129;
						n_179080.events[chckIndx(i_179098, 0, n_179080.events.length+0-1)-0]["Field2"] = wrap_event_178377(dest_179081, n_179080, n_179080.events[chckIndx(i_179098, 0, n_179080.events.length+0-1)-0]["Field0"], n_179080.events[chckIndx(i_179098, 0, n_179080.events.length+0-1)-0]["Field1"]);
						F.line = 3620;
						i_179103 = addInt(i_179103, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function apply_style_164027(n_164029, s_164030) {
	var F={procname:"vstyles.applyStyle",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/vstyles.nim",line:0};
	framePtr = F;
		F.line = 299;
		n_164029.style = {};
		L1: do {
			F.line = 300;
			var i_164073 = 0;
			F.line = 2088;
			var colontmp__164107 = 0;
			F.line = 300;
			colontmp__164107 = subInt(s_164030.length, 1);
			F.line = 2094;
			var res_164110 = 0;
			L2: do {
				F.line = 2095;
					L3: while (true) {
					if (!(res_164110 <= colontmp__164107)) break L3;
						F.line = 2096;
						i_164073 = res_164110;
						F.line = 301;
						n_164029.style[s_164030[i_164073]] = s_164030[addInt(i_164073, 1)];
						F.line = 2097;
						res_164110 = addInt(res_164110, 2);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function vnode_to_dom_179177(n_179179, kxi_179180) {
			var Tmp9;
			var Tmp10;

	var result_179181 = null;

	var F={procname:"karax.vnodeToDom",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((n_179179.kind == 0)) {
		F.line = 139;
		result_179181 = document.createTextNode(n_179179.text);
		F.line = 123;
		n_179179.dom = result_179181;
		if (!((n_179179.id == null))) {
		F.line = 124;
		kxi_178324[0].byId[n_179179.id] = n_179179;
		}
		
		}
		else {
		if ((n_179179.kind == 6)) {
		F.line = 142;
		result_179181 = document.createElement("div");
		F.line = 143;
		result_179181.innerHTML = n_179179.text;
		F.line = 123;
		n_179179.dom = result_179181;
		if (!((n_179179.id == null))) {
		F.line = 124;
		kxi_178324[0].byId[n_179179.id] = n_179179;
		}
		
		F.line = 145;
		break BeforeRet;
		}
		else {
		if ((n_179179.kind == 3)) {
		F.line = 147;
		var x_179264 = vcomponents_171240[0][n_179179.text](n_179179.kids);
		F.line = 148;
		result_179181 = vnode_to_dom_179177(x_179264, kxi_179180);
		F.line = 123;
		n_179179.dom = result_179181;
		if (!((n_179179.id == null))) {
		F.line = 124;
		kxi_178324[0].byId[n_179179.id] = n_179179;
		}
		
		F.line = 151;
		break BeforeRet;
		}
		else {
		if ((n_179179.kind == 4)) {
		F.line = 153;
		result_179181 = n_179179.dom;
		if (!(!((result_179181 == null)))) {
		F.line = 154;
		failed_assert_impl_20481(makeNimstrLit("/home/manuel/.nimble/pkgs/karax-1.1.0/karax/karax.nim(154, 12) `\x0Anot (result == nil)` "));
		}
		
		F.line = 123;
		n_179179.dom = result_179181;
		if (!((n_179179.id == null))) {
		F.line = 124;
		kxi_178324[0].byId[n_179179.id] = n_179179;
		}
		
		F.line = 157;
		break BeforeRet;
		}
		else {
		if ((n_179179.kind == 5)) {
		F.line = 159;
		var x_179429 = n_179179;
		if (!((x_179429.onAttachImpl == null))) {
		F.line = 160;
		x_179429.onAttachImpl(x_179429);
		}
		
		if (!(!((x_179429.renderImpl == null)))) {
		F.line = 161;
		failed_assert_impl_20481(makeNimstrLit("/home/manuel/.nimble/pkgs/karax-1.1.0/karax/karax.nim(161, 12) `\x0Anot (x.renderImpl == nil)` "));
		}
		
		if ((x_179429.expanded == null)) {
		F.line = 163;
		x_179429.expanded = x_179429.renderImpl(x_179429);
		}
		
		if (!(!((x_179429.expanded == null)))) {
		F.line = 165;
		failed_assert_impl_20481(makeNimstrLit("/home/manuel/.nimble/pkgs/karax-1.1.0/karax/karax.nim(165, 12) `\x0Anot (x.expanded == nil)` "));
		}
		
		F.line = 166;
		result_179181 = vnode_to_dom_179177(x_179429.expanded, kxi_179180);
		F.line = 123;
		n_179179.dom = result_179181;
		if (!((n_179179.id == null))) {
		F.line = 124;
		kxi_178324[0].byId[n_179179.id] = n_179179;
		}
		
		F.line = 168;
		break BeforeRet;
		}
		else {
			F.line = 170;
			result_179181 = document.createElement(to_tag_166675[chckIndx(n_179179.kind, 0, to_tag_166675.length+0-1)-0]);
			F.line = 123;
			n_179179.dom = result_179181;
			if (!((n_179179.id == null))) {
			F.line = 124;
			kxi_178324[0].byId[n_179179.id] = n_179179;
			}
			
			L1: do {
				F.line = 172;
				var k_179839 = null;
				L2: do {
					F.line = 282;
					var i_179881 = 0;
					F.line = 3616;
					var colontmp__179883 = 0;
					F.line = 282;
					colontmp__179883 = (n_179179.kids != null ? n_179179.kids.length : 0);
					F.line = 3617;
					var i_179885 = 0;
					L3: do {
						F.line = 3618;
							L4: while (true) {
							if (!(i_179885 < colontmp__179883)) break L4;
								F.line = 3619;
								i_179881 = i_179885;
								F.line = 282;
								k_179839 = n_179179.kids[chckIndx(i_179881, 0, n_179179.kids.length+0-1)-0];
								F.line = 173;
								result_179181.appendChild(vnode_to_dom_179177(k_179839, kxi_179180));
								F.line = 3620;
								i_179885 = addInt(i_179885, 1);
							}
					} while(false);
				} while(false);
			} while(false);
			if (!((n_179179.text == null))) {
			F.line = 176;
			result_179181.value = n_179179.text;
			}
			
		}
		}}}}
		if (!((n_179179.id == null))) {
		F.line = 178;
		result_179181.id = n_179179.id;
		}
		
		if (!((n_179179.class == null))) {
		F.line = 180;
		result_179181.className = n_179179.class;
		}
		
		L5: do {
			F.line = 183;
			var k_179840 = null;
			F.line = 183;
			var v_179841 = null;
			L6: do {
				F.line = 285;
				var i_179890 = 0;
				F.line = 2088;
				var colontmp__179892 = 0;
				F.line = 285;
				colontmp__179892 = subInt((n_179179.attrs != null ? n_179179.attrs.length : 0), 2);
				F.line = 2094;
				var res_179894 = 0;
				L7: do {
					F.line = 2095;
						L8: while (true) {
						if (!(res_179894 <= colontmp__179892)) break L8;
							F.line = 2096;
							i_179890 = res_179894;
							F.line = 286;
							k_179840 = n_179179.attrs[chckIndx(i_179890, 0, n_179179.attrs.length+0-1)-0];
							F.line = 286;
							v_179841 = n_179179.attrs[chckIndx(addInt(i_179890, 1), 0, n_179179.attrs.length+0-1)-0];
							if (!((v_179841 == null))) {
							F.line = 185;
							result_179181.setAttribute(k_179840, v_179841);
							}
							
							F.line = 2097;
							res_179894 = addInt(res_179894, 2);
						}
				} while(false);
			} while(false);
		} while(false);
		F.line = 186;
		apply_events_179078(n_179179);
			if (!!((kxi_179180 == null))) Tmp10 = false; else {				Tmp10 = (n_179179 == kxi_179180.toFocusV);			}			if (!Tmp10) Tmp9 = false; else {				Tmp9 = (kxi_179180.toFocus === null);			}		if (Tmp9) {
		F.line = 188;
		kxi_179180.toFocus = result_179181;
		}
		
		if (!((n_179179.style === null))) {
		F.line = 189;
		apply_style_164027(result_179181, n_179179.style);
		}
		
	} while (false);
	framePtr = F.prev;

	return result_179181;

}

function replace_by_id_180035(id_180037, new_tree_180038) {
	var F={procname:"karax.replaceById",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
	framePtr = F;
		F.line = 213;
		var x_180039 = document.getElementById(id_180037);
		F.line = 214;
		x_180039.parentNode.replaceChild(new_tree_180038, x_180039);
		F.line = 215;
		new_tree_180038.id = id_180037;
	framePtr = F.prev;

	
}

function len_167717(x_167719) {
	var result_167720 = 0;

	var F={procname:"vdom.len",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/vdom.nim",line:0};
	framePtr = F;
		F.line = 246;
		result_167720 = (x_167719.kids != null ? x_167719.kids.length : 0);
	framePtr = F.prev;

	return result_167720;

}

function HEX5BHEX5D_167741(x_167743, idx_167744) {
	var result_167745 = null;

	var F={procname:"vdom.[]",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/vdom.nim",line:0};
	framePtr = F;
		F.line = 247;
		result_167745 = x_167743.kids[chckIndx(idx_167744, 0, x_167743.kids.length+0-1)-0];
	framePtr = F.prev;

	return result_167745;

}

function same_179912(n_179914, e_179915, nesting_179916) {
			var Tmp1;
			var Tmp2;

	var result_179918 = false;

	var F={procname:"karax.same",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (kxi_178324[0].orphans.hasOwnProperty(n_179914.id)) {
		F.line = 192;
		result_179918 = true;
		break BeforeRet;
		}
		
		if ((n_179914.kind == 5)) {
		F.line = 194;
		result_179918 = same_179912(n_179914.expanded, e_179915, addInt(nesting_179916, 1));
		}
		else {
		if ((n_179914.kind == 6)) {
		F.line = 196;
		result_179918 = true;
		}
		else {
			if ((n_179914.kind == 3)) Tmp1 = true; else {				Tmp1 = (n_179914.kind == 4);			}		if (Tmp1) {
		F.line = 199;
		result_179918 = true;
		}
		else {
		if ((to_tag_166675[chckIndx(n_179914.kind, 0, to_tag_166675.length+0-1)-0] == e_179915.nodeName)) {
		F.line = 201;
		result_179918 = true;
		if (!((n_179914.kind == 0))) {
			if (!!((e_179915.childNodes.length == len_167717(n_179914)))) Tmp2 = false; else {				Tmp2 = !((n_179914.kind == 111));			}		if (Tmp2) {
		F.line = 205;
		rawEcho(makeNimstrLit("expected "), cstrToNimstr((len_167717(n_179914))+""), makeNimstrLit(" real "), cstrToNimstr((e_179915.childNodes.length)+""), makeNimstrLit(" "), cstrToNimstr(to_tag_166675[chckIndx(n_179914.kind, 0, to_tag_166675.length+0-1)-0]), makeNimstrLit(" nesting "), cstrToNimstr((nesting_179916)+""));
		F.line = 206;
		result_179918 = false;
		break BeforeRet;
		}
		
		L3: do {
			F.line = 207;
			var i_180011 = 0;
			F.line = 3616;
			var colontmp__180017 = 0;
			F.line = 207;
			colontmp__180017 = len_167717(n_179914);
			F.line = 3617;
			var i_180020 = 0;
			L4: do {
				F.line = 3618;
					L5: while (true) {
					if (!(i_180020 < colontmp__180017)) break L5;
						F.line = 3619;
						i_180011 = i_180020;
						if (!(same_179912(HEX5BHEX5D_167741(n_179914, i_180011), e_179915.childNodes[i_180011], addInt(nesting_179916, 1)))) {
						F.line = 208;
						result_179918 = false;
						break BeforeRet;
						}
						
						F.line = 3620;
						i_180020 = addInt(i_180020, 1);
					}
			} while(false);
		} while(false);
		}
		
		}
		else {
			F.line = 210;
		rawEcho(makeNimstrLit("VDOM: "), cstrToNimstr(to_tag_166675[chckIndx(n_179914.kind, 0, to_tag_166675.length+0-1)-0]), makeNimstrLit(" DOM: "), cstrToNimstr(e_179915.nodeName));
		}
		}}}
	} while (false);
	framePtr = F.prev;

	return result_179918;

}

function eq_162814(a_162816, b_162817) {
	var result_162818 = false;

	var F={procname:"vstyles.eq",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/vstyles.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((a_162816 === null)) {
		if ((b_162817 === null)) {
		F.line = 229;
		result_162818 = true;
		break BeforeRet;
		}
		else {
			F.line = 230;
			result_162818 = false;
			break BeforeRet;
		}
		
		}
		else {
		if ((b_162817 === null)) {
		F.line = 231;
		result_162818 = false;
		break BeforeRet;
		}
		}
		if (!((a_162816.length == b_162817.length))) {
		F.line = 232;
		result_162818 = false;
		break BeforeRet;
		}
		
		L1: do {
			F.line = 233;
			var i_162942 = 0;
			F.line = 3616;
			var colontmp__162976 = 0;
			F.line = 233;
			colontmp__162976 = a_162816.length;
			F.line = 3617;
			var i_162979 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_162979 < colontmp__162976)) break L3;
						F.line = 3619;
						i_162942 = i_162979;
						if (!((a_162816[i_162942] == b_162817[i_162942]))) {
						F.line = 234;
						result_162818 = false;
						break BeforeRet;
						}
						
						F.line = 3620;
						i_162979 = addInt(i_162979, 1);
					}
			} while(false);
		} while(false);
		F.line = 235;
		result_162818 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_162818;

}

function same_attrs_169505(a_169507, b_169508) {
	var result_169509 = false;

	var F={procname:"vdom.sameAttrs",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/vdom.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (((a_169507.attrs != null ? a_169507.attrs.length : 0) == (b_169508.attrs != null ? b_169508.attrs.length : 0))) {
		F.line = 290;
		result_169509 = true;
		L1: do {
			F.line = 291;
			var i_169540 = 0;
			F.line = 3616;
			var colontmp__169542 = 0;
			F.line = 291;
			colontmp__169542 = (a_169507.attrs != null ? a_169507.attrs.length : 0);
			F.line = 3617;
			var i_169545 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_169545 < colontmp__169542)) break L3;
						F.line = 3619;
						i_169540 = i_169545;
						if (!((a_169507.attrs[chckIndx(i_169540, 0, a_169507.attrs.length+0-1)-0] == b_169508.attrs[chckIndx(i_169540, 0, b_169508.attrs.length+0-1)-0]))) {
						F.line = 292;
						result_169509 = false;
						break BeforeRet;
						}
						
						F.line = 3620;
						i_169545 = addInt(i_169545, 1);
					}
			} while(false);
		} while(false);
		}
		
	} while (false);
	framePtr = F.prev;

	return result_169509;

}

function eq_180214(a_180216, b_180217) {
			var Tmp4;
			var Tmp5;

	var result_180218 = 0;

	var F={procname:"karax.eq",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((a_180216.kind == b_180217.kind))) {
		F.line = 237;
		result_180218 = 1;
		break BeforeRet;
		}
		
		if (!((a_180216.id == b_180217.id))) {
		F.line = 240;
		result_180218 = 1;
		break BeforeRet;
		}
		
		F.line = 241;
		result_180218 = 3;
		if (!((a_180216.index == b_180217.index))) {
		F.line = 244;
		result_180218 = 1;
		break BeforeRet;
		}
		
		if ((a_180216.kind == 0)) {
		if (!((a_180216.text == b_180217.text))) {
		F.line = 248;
		result_180218 = 1;
		break BeforeRet;
		}
		
		}
		else {
		if ((a_180216.kind == 3)) {
		if (!((a_180216.text == b_180217.text))) {
		F.line = 250;
		result_180218 = 1;
		break BeforeRet;
		}
		
		if (!((len_167717(a_180216) == len_167717(b_180217)))) {
		F.line = 251;
		result_180218 = 1;
		break BeforeRet;
		}
		
		L1: do {
			F.line = 252;
			var i_181019 = 0;
			F.line = 3616;
			var colontmp__181602 = 0;
			F.line = 252;
			colontmp__181602 = len_167717(a_180216);
			F.line = 3617;
			var i_181605 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_181605 < colontmp__181602)) break L3;
						F.line = 3619;
						i_181019 = i_181605;
						if ((eq_180214(HEX5BHEX5D_167741(a_180216, i_181019), HEX5BHEX5D_167741(b_180217, i_181019)) == 1)) {
						F.line = 253;
						result_180218 = 1;
						break BeforeRet;
						}
						
						F.line = 3620;
						i_181605 = addInt(i_181605, 1);
					}
			} while(false);
		} while(false);
		}
		else {
		if ((a_180216.kind == 4)) {
		F.line = 255;
		result_180218 = 3;
		break BeforeRet;
		}
		else {
		if ((a_180216.kind == 6)) {
		if (!((a_180216.text == b_180217.text))) {
		F.line = 258;
		result_180218 = 1;
		break BeforeRet;
		}
		
		}
		else {
		if ((b_180217.kind == 5)) {
		if (!((a_180216.text == b_180217.text))) {
		F.line = 263;
		result_180218 = 1;
		break BeforeRet;
		}
		
		if (!((a_180216.key == b_180217.key))) {
		F.line = 269;
		result_180218 = 1;
		break BeforeRet;
		}
		
		F.line = 270;
		result_180218 = 0;
		break BeforeRet;
		}
		}}}}
			if (!((a_180216.class == b_180217.class))) Tmp5 = true; else {				Tmp5 = !(eq_162814(a_180216.style, b_180217.style));			}			if (Tmp5) Tmp4 = true; else {				Tmp4 = !(same_attrs_169505(a_180216, b_180217));			}		if (Tmp4) {
		F.line = 276;
		result_180218 = 2;
		break BeforeRet;
		}
		
		F.line = 278;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_180218;

}

function update_styles_181620(new_node_181622, old_node_181623) {
	var F={procname:"karax.updateStyles",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
	framePtr = F;
		if (!((old_node_181623.dom == null))) {
		if (!((new_node_181622.style == null))) {
		F.line = 283;
		apply_style_164027(old_node_181623.dom, new_node_181622.style);
		}
		else {
			F.line = 284;
			old_node_181623.dom.style = {m_type: NTI157276, background: null, backgroundAttachment: null, backgroundColor: null, backgroundImage: null, backgroundPosition: null, backgroundRepeat: null, border: null, borderBottom: null, borderBottomColor: null, borderBottomStyle: null, borderBottomWidth: null, borderColor: null, borderLeft: null, borderLeftColor: null, borderLeftStyle: null, borderLeftWidth: null, borderRight: null, borderRightColor: null, borderRightStyle: null, borderRightWidth: null, borderStyle: null, borderTop: null, borderTopColor: null, borderTopStyle: null, borderTopWidth: null, borderWidth: null, bottom: null, captionSide: null, clear: null, clip: null, color: null, cursor: null, direction: null, display: null, emptyCells: null, cssFloat: null, font: null, fontFamily: null, fontSize: null, fontStretch: null, fontStyle: null, fontVariant: null, fontWeight: null, height: null, left: null, letterSpacing: null, lineHeight: null, listStyle: null, listStyleImage: null, listStylePosition: null, listStyleType: null, margin: null, marginBottom: null, marginLeft: null, marginRight: null, marginTop: null, maxHeight: null, maxWidth: null, minHeight: null, minWidth: null, overflow: null, padding: null, paddingBottom: null, paddingLeft: null, paddingRight: null, paddingTop: null, pageBreakAfter: null, pageBreakBefore: null, pointerEvents: null, position: null, right: null, scrollbar3dLightColor: null, scrollbarArrowColor: null, scrollbarBaseColor: null, scrollbarDarkshadowColor: null, scrollbarFaceColor: null, scrollbarHighlightColor: null, scrollbarShadowColor: null, scrollbarTrackColor: null, tableLayout: null, textAlign: null, textDecoration: null, textIndent: null, textTransform: null, transform: null, top: null, verticalAlign: null, visibility: null, width: null, wordSpacing: null, zIndex: 0};
		}
		
		F.line = 285;
		old_node_181623.dom.className = new_node_181622.class;
		}
		
		F.line = 286;
		old_node_181623.style = new_node_181622.style;
		F.line = 287;
		old_node_181623.class = new_node_181622.class;
	framePtr = F.prev;

	
}

function take_over_attr_167678(new_node_167680, old_node_167681) {
	var F={procname:"vdom.takeOverAttr",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/vdom.nim",line:0};
	framePtr = F;
		F.line = 230;
		old_node_167681.attrs = new_node_167680.attrs;
	framePtr = F.prev;

	
}

function update_attributes_181660(new_node_181662, old_node_181663) {
	var F={procname:"karax.updateAttributes",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
	framePtr = F;
		if (!((old_node_181663.dom == null))) {
		L1: do {
			F.line = 292;
			var k_181675 = null;
			F.line = 292;
			var __181676 = null;
			L2: do {
				F.line = 285;
				var i_181683 = 0;
				F.line = 2088;
				var colontmp__181685 = 0;
				F.line = 285;
				colontmp__181685 = subInt((old_node_181663.attrs != null ? old_node_181663.attrs.length : 0), 2);
				F.line = 2094;
				var res_181687 = 0;
				L3: do {
					F.line = 2095;
						L4: while (true) {
						if (!(res_181687 <= colontmp__181685)) break L4;
							F.line = 2096;
							i_181683 = res_181687;
							F.line = 286;
							k_181675 = old_node_181663.attrs[chckIndx(i_181683, 0, old_node_181663.attrs.length+0-1)-0];
							F.line = 286;
							__181676 = old_node_181663.attrs[chckIndx(addInt(i_181683, 1), 0, old_node_181663.attrs.length+0-1)-0];
							F.line = 293;
							old_node_181663.dom.removeAttribute(k_181675);
							F.line = 2097;
							res_181687 = addInt(res_181687, 2);
						}
				} while(false);
			} while(false);
		} while(false);
		L5: do {
			F.line = 294;
			var k_181677 = null;
			F.line = 294;
			var v_181678 = null;
			L6: do {
				F.line = 285;
				var i_181694 = 0;
				F.line = 2088;
				var colontmp__181696 = 0;
				F.line = 285;
				colontmp__181696 = subInt((new_node_181662.attrs != null ? new_node_181662.attrs.length : 0), 2);
				F.line = 2094;
				var res_181698 = 0;
				L7: do {
					F.line = 2095;
						L8: while (true) {
						if (!(res_181698 <= colontmp__181696)) break L8;
							F.line = 2096;
							i_181694 = res_181698;
							F.line = 286;
							k_181677 = new_node_181662.attrs[chckIndx(i_181694, 0, new_node_181662.attrs.length+0-1)-0];
							F.line = 286;
							v_181678 = new_node_181662.attrs[chckIndx(addInt(i_181694, 1), 0, new_node_181662.attrs.length+0-1)-0];
							if (!((v_181678 == null))) {
							F.line = 296;
							old_node_181663.dom.setAttribute(k_181677, v_181678);
							}
							
							F.line = 2097;
							res_181698 = addInt(res_181698, 2);
						}
				} while(false);
			} while(false);
		} while(false);
		}
		
		F.line = 297;
		take_over_attr_167678(new_node_181662, old_node_181663);
	framePtr = F.prev;

	
}

function merge_events_181714(new_node_181716, old_node_181717, kxi_181718) {
						var Tmp4;

	var F={procname:"karax.mergeEvents",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
	framePtr = F;
		F.line = 300;
		var d_181719 = old_node_181717.dom;
		L1: do {
			F.line = 301;
			var i_181736 = 0;
			F.line = 3616;
			var colontmp__181742 = 0;
			F.line = 301;
			colontmp__181742 = (old_node_181717.events != null ? old_node_181717.events.length : 0);
			F.line = 3617;
			var i_181745 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_181745 < colontmp__181742)) break L3;
						F.line = 3619;
						i_181736 = i_181745;
						F.line = 302;
						var k_181737 = old_node_181717.events[chckIndx(i_181736, 0, old_node_181717.events.length+0-1)-0]["Field0"];
						F.line = 303;
						F.line = 303;
						switch (k_181737) {
						case 30:
						case 29:
							Tmp4 = "keyup";
							break;
						default: 
							Tmp4 = to_event_name_166681[chckIndx(k_181737, 0, to_event_name_166681.length+0-1)-0];
							break;
						}
						var name_181740 = Tmp4;
						F.line = 306;
						d_181719.removeEventListener(name_181740, old_node_181717.events[chckIndx(i_181736, 0, old_node_181717.events.length+0-1)-0]["Field2"]);
						F.line = 3620;
						i_181745 = addInt(i_181745, 1);
					}
			} while(false);
		} while(false);
		F.line = 307;
		old_node_181717.events = new_node_181716.events;
		F.line = 308;
		apply_events_179078(old_node_181717);
	framePtr = F.prev;

	
}

function HEX5BHEX5DHEX3D_167759(x_167761, idx_167762, y_167763) {
	var F={procname:"vdom.[]=",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/vdom.nim",line:0};
	framePtr = F;
		F.line = 248;
		x_167761.kids[chckIndx(idx_167762, 0, x_167761.kids.length+0-1)-0] = y_167763;
	framePtr = F.prev;

	
}

function add_patch_v_181862(kxi_181864, parent_181865, pos_181866, new_child_181867) {
	var F={procname:"karax.addPatchV",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
	framePtr = F;
		F.line = 337;
		var l_181868 = kxi_181864.patchLenV;
		if (((kxi_181864.patchesV != null ? kxi_181864.patchesV.length : 0) <= l_181868)) {
		F.line = 340;
		if (kxi_181864.patchesV != null) { kxi_181864.patchesV.push({parent: parent_181865, newChild: new_child_181867, pos: pos_181866}); } else { kxi_181864.patchesV = [{parent: parent_181865, newChild: new_child_181867, pos: pos_181866}]; };
		}
		else {
			F.line = 342;
			kxi_181864.patchesV[chckIndx(l_181868, 0, kxi_181864.patchesV.length+0-1)-0].parent = parent_181865;
			F.line = 343;
			kxi_181864.patchesV[chckIndx(l_181868, 0, kxi_181864.patchesV.length+0-1)-0].newChild = new_child_181867;
			F.line = 344;
			kxi_181864.patchesV[chckIndx(l_181868, 0, kxi_181864.patchesV.length+0-1)-0].pos = pos_181866;
		}
		
		F.line = 345;
		kxi_181864.patchLenV = addInt(kxi_181864.patchLenV, 1);
	framePtr = F.prev;

	
}

function add_patch_181814(kxi_181816, ka_181817, parenta_181818, currenta_181819, na_181820) {
	var F={procname:"karax.addPatch",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
	framePtr = F;
		F.line = 325;
		var l_181821 = kxi_181816.patchLen;
		if (((kxi_181816.patches != null ? kxi_181816.patches.length : 0) <= l_181821)) {
		F.line = 328;
		if (kxi_181816.patches != null) { kxi_181816.patches.push({k: ka_181817, parent: parenta_181818, current: currenta_181819, n: na_181820}); } else { kxi_181816.patches = [{k: ka_181817, parent: parenta_181818, current: currenta_181819, n: na_181820}]; };
		}
		else {
			F.line = 330;
			kxi_181816.patches[chckIndx(l_181821, 0, kxi_181816.patches.length+0-1)-0].k = ka_181817;
			F.line = 331;
			kxi_181816.patches[chckIndx(l_181821, 0, kxi_181816.patches.length+0-1)-0].parent = parenta_181818;
			F.line = 332;
			kxi_181816.patches[chckIndx(l_181821, 0, kxi_181816.patches.length+0-1)-0].current = currenta_181819;
			F.line = 333;
			kxi_181816.patches[chckIndx(l_181821, 0, kxi_181816.patches.length+0-1)-0].n = na_181820;
		}
		
		F.line = 334;
		kxi_181816.patchLen = addInt(kxi_181816.patchLen, 1);
	framePtr = F.prev;

	
}

function diff_182027(new_node_182029, old_node_182030, parent_182031, current_182032, kxi_182033) {
				var Tmp1;
			var Tmp2;
			var Tmp3;
						var Tmp6;
						var Tmp9;
						var Tmp10;

	var result_182034 = 0;

	var F={procname:"karax.diff",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 389;
		result_182034 = eq_180214(new_node_182029, old_node_182030);
		F.line = 390;
		switch (result_182034) {
		case 0:
			F.line = 392;
			if (kxi_182033.components != null) { kxi_182033.components.push({oldNode: old_node_182030, newNode: new_node_182029, parent: parent_182031, current: current_182032}); } else { kxi_182033.components = [{oldNode: old_node_182030, newNode: new_node_182029, parent: parent_182031, current: current_182032}]; };
			break;
		case 3:
		case 2:
			F.line = 397;
			new_node_182029.dom = old_node_182030.dom;
			if ((result_182034 == 2)) {
			F.line = 399;
			update_styles_181620(new_node_182029, old_node_182030);
			F.line = 400;
			update_attributes_181660(new_node_182029, old_node_182030);
			if ((old_node_182030.kind == 0)) {
			F.line = 402;
			old_node_182030.text = new_node_182029.text;
			F.line = 403;
			old_node_182030.dom.nodeValue = new_node_182029.text;
			}
			
			}
			
				if (!(((new_node_182029.events != null ? new_node_182029.events.length : 0) == 0))) Tmp1 = true; else {					Tmp1 = !(((old_node_182030.events != null ? old_node_182030.events.length : 0) == 0));				}			if (Tmp1) {
			F.line = 406;
			merge_events_181714(new_node_182029, old_node_182030, kxi_182033);
			}
			
			F.line = 413;
			var new_length_182401 = len_167717(new_node_182029);
			F.line = 414;
			var old_length_182402 = len_167717(old_node_182030);
			if (((new_length_182401 == 0) && (old_length_182402 == 0))) {
			F.line = 415;
			break BeforeRet;
			}
			
			F.line = 416;
			var min_length_182403 = nimMin(new_length_182401, old_length_182402);
			if (!((old_node_182030.kind == new_node_182029.kind))) {
			F.line = 418;
			failed_assert_impl_20481(makeNimstrLit("/home/manuel/.nimble/pkgs/karax-1.1.0/karax/karax.nim(418, 12) `oldNode.kind == newNode.kind` "));
			}
			
			F.line = 419;
			var common_prefix_182602 = 0;
			F.line = 420;
			if ((old_node_182030.kind == 5)) Tmp3 = true; else {				Tmp3 = (old_node_182030.kind == 3);			}			if (Tmp3) Tmp2 = true; else {				Tmp2 = (old_node_182030.kind == 4);			}			var is_special_182630 = Tmp2;
			L4: do {
				F.line = 449;
					L5: while (true) {
					if (!(common_prefix_182602 < min_length_182403)) break L5;
						F.line = 425;
						var old_len_182662 = kxi_182033.patchLen;
						F.line = 426;
						var old_len_v_182664 = kxi_182033.patchLenV;
						if (!((common_prefix_182602 < len_167717(new_node_182029)))) {
						F.line = 427;
						failed_assert_impl_20481(makeNimstrLit("/home/manuel/.nimble/pkgs/karax-1.1.0/karax/karax.nim(427, 14) `commonPrefix < len(newNode)` "));
						}
						
						if (!((common_prefix_182602 < len_167717(old_node_182030)))) {
						F.line = 428;
						failed_assert_impl_20481(makeNimstrLit("/home/manuel/.nimble/pkgs/karax-1.1.0/karax/karax.nim(428, 14) `commonPrefix < len(oldNode)` "));
						}
						
						F.line = 429;
						if (is_special_182630) {
						Tmp6 = diff_182027(HEX5BHEX5D_167741(new_node_182029, common_prefix_182602), HEX5BHEX5D_167741(old_node_182030, common_prefix_182602), parent_182031, current_182032, kxi_182033);
						}
						else {
						Tmp6 = diff_182027(HEX5BHEX5D_167741(new_node_182029, common_prefix_182602), HEX5BHEX5D_167741(old_node_182030, common_prefix_182602), current_182032, current_182032.childNodes[chckIndx(common_prefix_182602, 0, current_182032.childNodes.length+0-1)-0], kxi_182033);
						}
						
						var r_183006 = Tmp6;
						F.line = 450;
						switch (r_183006) {
						case 3:
						case 0:
						case 2:
							F.line = 435;
							HEX5BHEX5DHEX3D_167759(new_node_182029, common_prefix_182602, HEX5BHEX5D_167741(old_node_182030, common_prefix_182602));
							F.line = 451;
							common_prefix_182602 = addInt(common_prefix_182602, 1);
							break;
						case 4:
							F.line = 438;
							add_patch_v_181862(kxi_182033, old_node_182030, common_prefix_182602, HEX5BHEX5D_167741(new_node_182029, common_prefix_182602));
							F.line = 451;
							common_prefix_182602 = addInt(common_prefix_182602, 1);
							F.line = 441;
							result_182034 = 4;
							break;
						case 1:
							F.line = 444;
							kxi_182033.patchLen = old_len_182662;
							F.line = 445;
							kxi_182033.patchLenV = old_len_v_182664;
							if (!((result_182034 == 1))) {
							F.line = 446;
							result_182034 = r_183006;
							}
							
							F.line = 447;
							break L4;
							break;
						}
					}
			} while(false);
			F.line = 454;
			var old_pos_183033 = subInt(old_length_182402, 1);
			F.line = 455;
			var new_pos_183034 = subInt(new_length_182401, 1);
			L7: do {
				F.line = 456;
					L8: while (true) {
						if (!(common_prefix_182602 <= old_pos_183033)) Tmp9 = false; else {							Tmp9 = (common_prefix_182602 <= new_pos_183034);						}					if (!Tmp9) break L8;
						F.line = 425;
						var old_len_183042 = kxi_182033.patchLen;
						F.line = 426;
						var old_len_v_183044 = kxi_182033.patchLenV;
						if (!((new_pos_183034 < len_167717(new_node_182029)))) {
						F.line = 427;
						failed_assert_impl_20481(makeNimstrLit("/home/manuel/.nimble/pkgs/karax-1.1.0/karax/karax.nim(427, 14) `newPos < len(newNode)` "));
						}
						
						if (!((old_pos_183033 < len_167717(old_node_182030)))) {
						F.line = 428;
						failed_assert_impl_20481(makeNimstrLit("/home/manuel/.nimble/pkgs/karax-1.1.0/karax/karax.nim(428, 14) `oldPos < len(oldNode)` "));
						}
						
						F.line = 429;
						if (is_special_182630) {
						Tmp10 = diff_182027(HEX5BHEX5D_167741(new_node_182029, new_pos_183034), HEX5BHEX5D_167741(old_node_182030, old_pos_183033), parent_182031, current_182032, kxi_182033);
						}
						else {
						Tmp10 = diff_182027(HEX5BHEX5D_167741(new_node_182029, new_pos_183034), HEX5BHEX5D_167741(old_node_182030, old_pos_183033), current_182032, current_182032.childNodes[chckIndx(old_pos_183033, 0, current_182032.childNodes.length+0-1)-0], kxi_182033);
						}
						
						var r_183406 = Tmp10;
						F.line = 457;
						switch (r_183406) {
						case 3:
						case 0:
						case 2:
							F.line = 435;
							HEX5BHEX5DHEX3D_167759(new_node_182029, new_pos_183034, HEX5BHEX5D_167741(old_node_182030, old_pos_183033));
							F.line = 458;
							old_pos_183033 = subInt(old_pos_183033, 1);
							F.line = 459;
							new_pos_183034 = subInt(new_pos_183034, 1);
							break;
						case 4:
							F.line = 438;
							add_patch_v_181862(kxi_182033, old_node_182030, old_pos_183033, HEX5BHEX5D_167741(new_node_182029, new_pos_183034));
							F.line = 458;
							old_pos_183033 = subInt(old_pos_183033, 1);
							F.line = 459;
							new_pos_183034 = subInt(new_pos_183034, 1);
							F.line = 441;
							result_182034 = 4;
							break;
						case 1:
							F.line = 444;
							kxi_182033.patchLen = old_len_183042;
							F.line = 445;
							kxi_182033.patchLenV = old_len_v_183044;
							if (!((result_182034 == 1))) {
							F.line = 446;
							result_182034 = r_183406;
							}
							
							F.line = 447;
							break L7;
							break;
						}
					}
			} while(false);
			F.line = 461;
			var pos_183451 = addInt(nimMin(old_pos_183033, new_pos_183034), 1);
			L11: do {
				F.line = 463;
				var i_183460 = 0;
				F.line = 2104;
				var colontmp__183805 = 0;
				F.line = 463;
				colontmp__183805 = subInt(pos_183451, 1);
				F.line = 2107;
				var res_183808 = common_prefix_182602;
				L12: do {
					F.line = 2108;
						L13: while (true) {
						if (!(res_183808 <= colontmp__183805)) break L13;
							F.line = 2109;
							i_183460 = res_183808;
							F.line = 464;
							var r_183461 = diff_182027(HEX5BHEX5D_167741(new_node_182029, i_183460), HEX5BHEX5D_167741(old_node_182030, i_183460), current_182032, current_182032.childNodes[chckIndx(i_183460, 0, current_182032.childNodes.length+0-1)-0], kxi_182033);
							if ((r_183461 == 4)) {
							F.line = 467;
							add_patch_v_181862(kxi_182033, old_node_182030, i_183460, HEX5BHEX5D_167741(new_node_182029, i_183460));
							}
							else {
							if (!((r_183461 == 1))) {
							F.line = 469;
							HEX5BHEX5DHEX3D_167759(new_node_182029, i_183460, HEX5BHEX5D_167741(old_node_182030, i_183460));
							}
							}
							F.line = 2110;
							res_183808 = addInt(res_183808, 1);
						}
				} while(false);
			} while(false);
			if ((addInt(old_pos_183033, 1) == old_length_182402)) {
			L14: do {
				F.line = 474;
				var i_183486 = 0;
				F.line = 2107;
				var res_183815 = pos_183451;
				L15: do {
					F.line = 2108;
						L16: while (true) {
						if (!(res_183815 <= new_pos_183034)) break L16;
							F.line = 2109;
							i_183486 = res_183815;
							F.line = 475;
							add_patch_181814(kxi_182033, 2, current_182032, null, HEX5BHEX5D_167741(new_node_182029, i_183486));
							F.line = 476;
							result_182034 = 4;
							F.line = 2110;
							res_183815 = addInt(res_183815, 1);
						}
				} while(false);
			} while(false);
			}
			else {
				F.line = 478;
				var before_183487 = current_182032.childNodes[chckIndx(addInt(old_pos_183033, 1), 0, current_182032.childNodes.length+0-1)-0];
				L17: do {
					F.line = 479;
					var i_183496 = 0;
					F.line = 2107;
					var res_183822 = pos_183451;
					L18: do {
						F.line = 2108;
							L19: while (true) {
							if (!(res_183822 <= new_pos_183034)) break L19;
								F.line = 2109;
								i_183496 = res_183822;
								F.line = 480;
								add_patch_181814(kxi_182033, 3, current_182032, before_183487, HEX5BHEX5D_167741(new_node_182029, i_183496));
								F.line = 481;
								result_182034 = 4;
								F.line = 2110;
								res_183822 = addInt(res_183822, 1);
							}
					} while(false);
				} while(false);
			}
			
			L20: do {
				F.line = 483;
				var i_183505 = 0;
				F.line = 2107;
				var res_183829 = pos_183451;
				L21: do {
					F.line = 2108;
						L22: while (true) {
						if (!(res_183829 <= old_pos_183033)) break L22;
							F.line = 2109;
							i_183505 = res_183829;
							F.line = 484;
							add_patch_181814(kxi_178324[0], 4, null, null, HEX5BHEX5D_167741(old_node_182030, i_183505));
							F.line = 486;
							add_patch_181814(kxi_182033, 1, current_182032, current_182032.childNodes[chckIndx(i_183505, 0, current_182032.childNodes.length+0-1)-0], null);
							F.line = 487;
							result_182034 = 4;
							F.line = 2110;
							res_183829 = addInt(res_183829, 1);
						}
				} while(false);
			} while(false);
			break;
		case 1:
			F.line = 489;
			add_patch_181814(kxi_178324[0], 4, null, null, old_node_182030);
			F.line = 490;
			add_patch_181814(kxi_182033, 0, parent_182031, current_182032, new_node_182029);
			break;
		case 4:
			if (true) {
			F.line = 491;
			failed_assert_impl_20481(makeNimstrLit("/home/manuel/.nimble/pkgs/karax-1.1.0/karax/karax.nim(491, 26) `false` eq returned usenewNode"));
			}
			
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_182034;

}

function apply_components_183846(kxi_183848) {
						var Tmp3;

	var F={procname:"karax.applyComponents",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
	framePtr = F;
		F.line = 499;
		var i_183850 = 0;
		L1: do {
			F.line = 502;
				L2: while (true) {
				if (!(i_183850 < (kxi_183848.components != null ? kxi_183848.components.length : 0))) break L2;
					F.line = 503;
					var x_183858 = kxi_183848.components[chckIndx(i_183850, 0, kxi_183848.components.length+0-1)-0].oldNode;
					F.line = 504;
					var new_node_183859 = kxi_183848.components[chckIndx(i_183850, 0, kxi_183848.components.length+0-1)-0].newNode;
						if (!!((x_183858.changedImpl == null))) Tmp3 = false; else {							Tmp3 = x_183858.changedImpl(x_183858, new_node_183859);						}					if (Tmp3) {
					F.line = 510;
					var current_184201 = kxi_183848.components[chckIndx(i_183850, 0, kxi_183848.components.length+0-1)-0].current;
					F.line = 511;
					var parent_184202 = kxi_183848.components[chckIndx(i_183850, 0, kxi_183848.components.length+0-1)-0].parent;
					F.line = 512;
					x_183858.updatedImpl(x_183858, new_node_183859);
					F.line = 513;
					var old_expanded_184203 = x_183858.expanded;
					F.line = 514;
					x_183858.expanded = x_183858.renderImpl(x_183858);
					F.line = 517;
					x_183858.renderedVersion = x_183858.version;
					if ((old_expanded_184203 == null)) {
					F.line = 519;
					add_patch_181814(kxi_178324[0], 4, null, null, x_183858);
					F.line = 520;
					add_patch_181814(kxi_183848, 0, parent_184202, current_184201, x_183858.expanded);
					}
					else {
						F.line = 524;
						var res_184601 = diff_182027(x_183858.expanded, old_expanded_184203, parent_184202, current_184201, kxi_183848);
						if ((res_184601 == 4)) {
						}
						else {
						if (!((res_184601 == 1))) {
						F.line = 532;
						x_183858.expanded = old_expanded_184203;
						if (!(!((old_expanded_184203.dom == null)))) {
						F.line = 533;
						failed_assert_impl_20481(makeNimstrLit("/home/manuel/.nimble/pkgs/karax-1.1.0/karax/karax.nim(533, 18) `\x0Anot (oldExpanded.dom == nil)` old expanded.dom is nil"));
						}
						
						}
						else {
							if (!(!((x_183858.expanded.dom == null)))) {
							F.line = 537;
							failed_assert_impl_20481(makeNimstrLit("/home/manuel/.nimble/pkgs/karax-1.1.0/karax/karax.nim(537, 18) `\x0Anot (x.expanded.dom == nil)` expanded.dom is nil"));
							}
							
						}
						}
					}
					
					}
					
					F.line = 538;
					i_183850 = addInt(i_183850, 1);
				}
		} while(false);
		F.line = 539;
		if (kxi_183848.components.length < 0) { for (var i=kxi_183848.components.length;i<0;++i) kxi_183848.components.push({oldNode: null, newNode: null, parent: null, current: null}); }
               else { kxi_183848.components.length = 0; };
	framePtr = F.prev;

	
}

function apply_patch_181909(kxi_181911) {
	var F={procname:"karax.applyPatch",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 348;
			var i_181921 = 0;
			F.line = 3616;
			var colontmp__182002 = 0;
			F.line = 348;
			colontmp__182002 = kxi_181911.patchLen;
			F.line = 3617;
			var i_182005 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_182005 < colontmp__182002)) break L3;
						F.line = 3619;
						i_181921 = i_182005;
						F.line = 349;
						var p_181922 = nimCopy(null, kxi_181911.patches[chckIndx(i_181921, 0, kxi_181911.patches.length+0-1)-0], NTI178209);
						F.line = 350;
						switch (p_181922.k) {
						case 0:
							F.line = 352;
							var nn_181923 = vnode_to_dom_179177(p_181922.n, kxi_181911);
							if ((p_181922.parent == null)) {
							F.line = 354;
							replace_by_id_180035(kxi_181911.rootId, nn_181923);
							}
							else {
								F.line = 356;
							p_181922.parent.replaceChild(nn_181923, p_181922.current);
							}
							
							break;
						case 1:
							F.line = 358;
							p_181922.parent.removeChild(p_181922.current);
							break;
						case 2:
							F.line = 360;
							var nn_181935 = vnode_to_dom_179177(p_181922.n, kxi_181911);
							F.line = 361;
							p_181922.parent.appendChild(nn_181935);
							break;
						case 3:
							F.line = 363;
							var nn_181936 = vnode_to_dom_179177(p_181922.n, kxi_181911);
							F.line = 364;
							p_181922.parent.insertBefore(nn_181936, p_181922.current);
							break;
						case 4:
							F.line = 366;
							var n_181937 = p_181922.n;
							if (!((n_181937.id == null))) {
							F.line = 367;
							delete kxi_181911.byId[n_181937.id];
							}
							
							if ((n_181937.kind == 5)) {
							F.line = 369;
							var x_181961 = n_181937;
							if (!((x_181961.onDetachImpl == null))) {
							F.line = 370;
							x_181961.onDetachImpl(x_181961);
							}
							
							}
							
							if (!(kxi_181911.surpressRedraws)) {
							F.line = 372;
							n_181937.dom = null;
							}
							
							break;
						}
						F.line = 3620;
						i_182005 = addInt(i_182005, 1);
					}
			} while(false);
		} while(false);
		F.line = 373;
		kxi_181911.patchLen = 0;
		L4: do {
			F.line = 374;
			var i_181979 = 0;
			F.line = 3616;
			var colontmp__182008 = 0;
			F.line = 374;
			colontmp__182008 = kxi_181911.patchLenV;
			F.line = 3617;
			var i_182011 = 0;
			L5: do {
				F.line = 3618;
					L6: while (true) {
					if (!(i_182011 < colontmp__182008)) break L6;
						F.line = 3619;
						i_181979 = i_182011;
						F.line = 375;
						var p_181980 = nimCopy(null, kxi_181911.patchesV[chckIndx(i_181979, 0, kxi_181911.patchesV.length+0-1)-0], NTI178211);
						F.line = 376;
						HEX5BHEX5DHEX3D_167759(p_181980.parent, p_181980.pos, p_181980.newChild);
						if (!(!((p_181980.newChild.dom == null)))) {
						F.line = 377;
						failed_assert_impl_20481(makeNimstrLit("/home/manuel/.nimble/pkgs/karax-1.1.0/karax/karax.nim(377, 12) `\x0Anot (p.newChild.dom == nil)` "));
						}
						
						F.line = 3620;
						i_182011 = addInt(i_182011, 1);
					}
			} while(false);
		} while(false);
		F.line = 378;
		kxi_181911.patchLenV = 0;
	framePtr = F.prev;

	
}

function dodraw_186631(kxi_186633) {
	var F={procname:"karax.dodraw",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((kxi_186633.renderer === null)) {
		F.line = 587;
		break BeforeRet;
		}
		
		F.line = 588;
		var rdata_186640 = {hashPart: window.location.hash};
		F.line = 589;
		var newtree_186641 = kxi_186633.renderer(rdata_186640);
		F.line = 590;
		kxi_186633.runCount = addInt(kxi_186633.runCount, 1);
		F.line = 591;
		newtree_186641.id = kxi_186633.rootId;
		F.line = 592;
		kxi_186633.toFocus = null;
		if ((kxi_186633.currentTree == null)) {
		F.line = 594;
		var asdom_186662 = vnode_to_dom_179177(newtree_186641, kxi_186633);
		F.line = 595;
		replace_by_id_180035(kxi_186633.rootId, asdom_186662);
		}
		else {
			if (!(same_179912(kxi_186633.currentTree, document.getElementById(kxi_186633.rootId), 0))) {
			F.line = 597;
			failed_assert_impl_20481(makeNimstrLit("/home/manuel/.nimble/pkgs/karax-1.1.0/karax/karax.nim(597, 14) `same(kxi.currentTree, getElementById(document, kxi.rootId), 0)` "));
			}
			
			F.line = 598;
			var olddom_186801 = document.getElementById(kxi_186633.rootId);
			F.line = 599;
			diff_182027(newtree_186641, kxi_186633.currentTree, null, olddom_186801, kxi_186633);
		}
		
		F.line = 604;
		apply_components_183846(kxi_186633);
		F.line = 609;
		apply_patch_181909(kxi_186633);
		F.line = 610;
		kxi_186633.currentTree = newtree_186641;
		if (!(same_179912(kxi_186633.currentTree, document.getElementById(kxi_186633.rootId), 0))) {
		F.line = 611;
		failed_assert_impl_20481(makeNimstrLit("/home/manuel/.nimble/pkgs/karax-1.1.0/karax/karax.nim(611, 12) `same(kxi.currentTree, getElementById(document, kxi.rootId), 0)` "));
		}
		
		if (!((kxi_186633.postRenderCallback === null))) {
		F.line = 614;
		kxi_186633.postRenderCallback(rdata_186640);
		}
		
		if (!((kxi_186633.toFocus == null))) {
		F.line = 618;
		kxi_186633.toFocus.focus();
		}
		
		F.line = 619;
		kxi_186633.renderId = 0;
	} while (false);
	framePtr = F.prev;

	
}

function init_188046(ev_188048) {

		function HEX3Aanonymous_188049() {
			var F={procname:"init.:anonymous",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
			framePtr = F;
				F.line = 644;
				dodraw_186631(kxi_178324[0]);
			framePtr = F.prev;

			
		}

	var F={procname:"karax.init",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
	framePtr = F;
		F.line = 644;
		kxi_178324[0].renderId = window.requestAnimationFrame(HEX3Aanonymous_188049);
	framePtr = F.prev;

	
}

function redraw_187814(kxi_187816) {

		function HEX3Aanonymous_188001() {
			var F={procname:"redraw.:anonymous",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
			framePtr = F;
				F.line = 637;
				dodraw_186631(kxi_187816);
			framePtr = F.prev;

			
		}

	var F={procname:"karax.redraw",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
	framePtr = F;
		if ((kxi_187816.renderId == 0)) {
		F.line = 637;
		kxi_187816.renderId = window.requestAnimationFrame(HEX3Aanonymous_188001);
		}
		
	framePtr = F.prev;

	
}

function set_renderer_188078(renderer_188083, root_188084, client_post_render_callback_188088) {

		function HEX3Aanonymous_188248() {
			var F={procname:"setRenderer.:anonymous",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
			framePtr = F;
				F.line = 667;
				redraw_187814(kxi_178324[0]);
			framePtr = F.prev;

			
		}

	var result_188089 = null;

	var F={procname:"karax.setRenderer",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
	framePtr = F;
		if ((document.getElementById(root_188084) === null)) {
		F.line = 653;
		var msg_188097 = (("Could not find a <div> with id=" + root_188084) + ". Karax needs it as its rendering target.");
		F.line = 2895;
		var e_188104 = null;
		F.line = 2896;
		e_188104 = {m_type: NTI3826, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 655;
		e_188104.message = nimCopy(null, cstrToNimstr(msg_188097), NTI138);
		F.line = 2891;
		e_188104.parent = null;
		F.line = 655;
		raiseException(e_188104, "Exception");
		}
		
		F.line = 657;
		result_188089 = {rootId: root_188084, renderer: nimCopy(null, renderer_188083, NTI188080), postRenderCallback: nimCopy(null, client_post_render_callback_188088, NTI188085), patches: new_seq_188127(60), patchesV: new_seq_188179(30), components: nimCopy(null, [], NTI188231), surpressRedraws: false, byId: {}, orphans: {}, currentTree: null, toFocus: null, toFocusV: null, renderId: 0, patchLen: 0, patchLenV: 0, runCount: 0};
		F.line = 665;
		kxi_178324[0] = result_188089;
		F.line = 666;
		window.onload = init_188046;
		F.line = 667;
		window.onhashchange = HEX3Aanonymous_188248;
	framePtr = F.prev;

	return result_188089;

}

function set_renderer_188277(renderer_188281, root_188282, client_post_render_callback_188285) {

		function wrap_renderer_188287(data_188289) {
			var result_188290 = null;

			var F={procname:"setRenderer.wrapRenderer",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
			framePtr = F;
				F.line = 672;
				result_188290 = renderer_188281();
			framePtr = F.prev;

			return result_188290;

		}

		function wrap_post_render_188304(data_188306) {
			var F={procname:"setRenderer.wrapPostRender",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
			framePtr = F;
				if (!((client_post_render_callback_188285 == null))) {
				F.line = 674;
				client_post_render_callback_188285();
				}
				
			framePtr = F.prev;

			
		}

	var result_188286 = null;

	var F={procname:"karax.setRenderer",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
	framePtr = F;
		F.line = 671;
		result_188286 = set_renderer_188078(wrap_renderer_188287, root_188282, wrap_post_render_188304);
	framePtr = F.prev;

	return result_188286;

}

function new_vnode_169029(kind_169031) {
	var result_169032 = null;

	var F={procname:"vdom.newVNode",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/vdom.nim",line:0};
	framePtr = F;
		F.line = 259;
		result_169032 = {kind: kind_169031, index: -1, m_type: NTI166705, id: null, class: null, text: null, kids: null, attrs: null, events: null, style: null, dom: null};
	framePtr = F.prev;

	return result_169032;

}

function add_167777(parent_167779, kid_167780) {
	var F={procname:"vdom.add",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/vdom.nim",line:0};
	framePtr = F;
		F.line = 253;
		if (parent_167779.kids != null) { parent_167779.kids.push(kid_167780); } else { parent_167779.kids = [kid_167780]; };
	framePtr = F.prev;

	
}

function tree_169048(kind_169050, kids_169052) {
	var result_169053 = null;

	var F={procname:"vdom.tree",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/vdom.nim",line:0};
	framePtr = F;
		F.line = 262;
		result_169053 = new_vnode_169029(kind_169050);
		L1: do {
			F.line = 263;
			var k_169092 = null;
			F.line = 2247;
			var i_169096 = 0;
			L2: do {
				F.line = 2248;
					L3: while (true) {
					if (!(i_169096 < (kids_169052 != null ? kids_169052.length : 0))) break L3;
						F.line = 2249;
						k_169092 = kids_169052[chckIndx(i_169096, 0, kids_169052.length+0-1)-0];
						F.line = 263;
						add_167777(result_169053, k_169092);
						F.line = 2250;
						i_169096 = addInt(i_169096, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_169053;

}

function text_169175(s_169177) {
	var result_169178 = null;

	var F={procname:"vdom.text",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/vdom.nim",line:0};
	framePtr = F;
		F.line = 271;
		result_169178 = {kind: 0, text: toJSStr(s_169177), index: -1, m_type: NTI166705, id: null, class: null, kids: null, attrs: null, events: null, style: null, dom: null};
	framePtr = F.prev;

	return result_169178;

}

function set_attr_167549(n_167551, key_167552, val_167553) {
	var F={procname:"vdom.setAttr",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/vdom.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (((n_167551.attrs != null ? n_167551.attrs.length : 0) == 0)) {
		F.line = 216;
		n_167551.attrs = nimCopy(null, [key_167552, val_167553], NTI167572);
		}
		else {
			L1: do {
				F.line = 218;
				var i_167591 = 0;
				F.line = 2088;
				var colontmp__167613 = 0;
				F.line = 218;
				colontmp__167613 = subInt((n_167551.attrs != null ? n_167551.attrs.length : 0), 2);
				F.line = 2094;
				var res_167616 = 0;
				L2: do {
					F.line = 2095;
						L3: while (true) {
						if (!(res_167616 <= colontmp__167613)) break L3;
							F.line = 2096;
							i_167591 = res_167616;
							if ((n_167551.attrs[chckIndx(i_167591, 0, n_167551.attrs.length+0-1)-0] == key_167552)) {
							F.line = 220;
							n_167551.attrs[chckIndx(addInt(i_167591, 1), 0, n_167551.attrs.length+0-1)-0] = val_167553;
							F.line = 221;
							break BeforeRet;
							}
							
							F.line = 2097;
							res_167616 = addInt(res_167616, 2);
						}
				} while(false);
			} while(false);
			F.line = 222;
			var Tmp4 = nimCopy(null, key_167552, NTI140);
			if (n_167551.attrs != null) { n_167551.attrs.push(Tmp4); } else { n_167551.attrs = [Tmp4]; };
			F.line = 223;
			var Tmp5 = nimCopy(null, val_167553, NTI140);
			if (n_167551.attrs != null) { n_167551.attrs.push(Tmp5); } else { n_167551.attrs = [Tmp5]; };
		}
		
	} while (false);
	framePtr = F.prev;

	
}

function add_event_listener_169560(n_169562, event_169563, handler_169564) {
	var F={procname:"vdom.addEventListener",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/vdom.nim",line:0};
	framePtr = F;
		F.line = 295;
		if (n_169562.events != null) { n_169562.events.push({Field0: event_169563, Field1: handler_169564, Field2: null}); } else { n_169562.events = [{Field0: event_169563, Field1: handler_169564, Field2: null}]; };
	framePtr = F.prev;

	
}

function add_event_handler_188454(n_188456, k_188457, action_188458, kxi_188459) {

		function wrapper_188460(ev_188462, n_188463) {
			var F={procname:"addEventHandler.wrapper",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
			framePtr = F;
				F.line = 700;
				action_188458(ev_188462, n_188463);
				if (!(kxi_188459.surpressRedraws)) {
				F.line = 701;
				redraw_187814(kxi_188459);
				}
				
			framePtr = F.prev;

			
		}

	var F={procname:"karax.addEventHandler",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
	framePtr = F;
		F.line = 702;
		add_event_listener_169560(n_188456, k_188457, wrapper_188460);
	framePtr = F.prev;

	
}

function input_handler_191439(ev_191441, n_191442) {
	var F={procname:"karax_client.inputHandler",prev:framePtr,filename:"karax_client.nim",line:0};
	framePtr = F;
		F.line = 17;
		switch (toJSStr(cstrToNimstr(n_191442.id))) {
		case "name1":
			F.line = 19;
			settings_191423.name1 = nimCopy(null, cstrToNimstr(value_166813(n_191442)), NTI138);
			break;
		case "name2":
			F.line = 21;
			settings_191423.name2 = nimCopy(null, cstrToNimstr(value_166813(n_191442)), NTI138);
			break;
		case "AI":
			F.line = 23;
			settings_191423.ai = eqStrings(cstrToNimstr(value_166813(n_191442)), makeNimstrLit("on"));
			break;
		default: 
			break;
		}
	framePtr = F.prev;

	
}

function add_event_handler_188490(n_188492, k_188493, action_188496, kxi_188497) {

		function wrapper_188498(ev_188500, n_188501) {
			var F={procname:"addEventHandler.wrapper",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
			framePtr = F;
				F.line = 712;
				action_188496();
				if (!(kxi_188497.surpressRedraws)) {
				F.line = 713;
				redraw_187814(kxi_188497);
				}
				
			framePtr = F.prev;

			
		}

	var F={procname:"karax.addEventHandler",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
	framePtr = F;
		F.line = 714;
		add_event_listener_169560(n_188492, k_188493, wrapper_188498);
	framePtr = F.prev;

	
}

function start_game_191458() {
	var F={procname:"karax_client.startGame",prev:framePtr,filename:"karax_client.nim",line:0};
	framePtr = F;
		F.line = 26;
		setup_143653(game_191223, settings_191423);
		F.line = 27;
		state_191225[0] = 2;
	framePtr = F.prev;

	
}

function setup_gui_191490() {
	var result_191492 = null;

	var F={procname:"karax_client.setupGUI",prev:framePtr,filename:"karax_client.nim",line:0};
	framePtr = F;
		F.line = 36;
		F.line = 36;
		var tmp_191512 = tree_169048(43, []);
		F.line = 36;
		tmp_191512.class = "center";
		F.line = 37;
		var tmp_191518 = tree_169048(43, []);
		F.line = 37;
		tmp_191518.class = "settings";
		F.line = 38;
		var tmp_191524 = tree_169048(104, []);
		F.line = 39;
		add_167777(tmp_191524, text_169175(makeNimstrLit("Player 1: ")));
		F.line = 40;
		var tmp_191530 = tree_169048(105, []);
		F.line = 40;
		set_attr_167549(tmp_191530, "placeholder", "name 1");
		F.line = 40;
		tmp_191530.id = "name1";
		F.line = 40;
		add_event_handler_188454(tmp_191530, 8, input_handler_191439, kxi_178324[0]);
		F.line = 40;
		add_167777(tmp_191524, tmp_191530);
		F.line = 41;
		var tmp_191537 = tree_169048(71, []);
		F.line = 41;
		add_167777(tmp_191524, tmp_191537);
		F.line = 41;
		add_167777(tmp_191518, tmp_191524);
		F.line = 42;
		var tmp_191543 = tree_169048(104, []);
		F.line = 43;
		add_167777(tmp_191543, text_169175(makeNimstrLit("Player 2: ")));
		F.line = 44;
		var tmp_191549 = tree_169048(105, []);
		F.line = 44;
		set_attr_167549(tmp_191549, "placeholder", "name 2");
		F.line = 44;
		tmp_191549.id = "name2";
		F.line = 44;
		add_event_handler_188454(tmp_191549, 8, input_handler_191439, kxi_178324[0]);
		F.line = 44;
		add_167777(tmp_191543, tmp_191549);
		F.line = 44;
		add_167777(tmp_191518, tmp_191543);
		F.line = 45;
		var tmp_191556 = tree_169048(104, []);
		F.line = 46;
		add_167777(tmp_191556, text_169175(makeNimstrLit("AI")));
		F.line = 47;
		var tmp_191562 = tree_169048(105, []);
		F.line = 47;
		set_attr_167549(tmp_191562, "type", "checkbox");
		F.line = 47;
		tmp_191562.id = "AI";
		F.line = 47;
		add_event_handler_188454(tmp_191562, 8, input_handler_191439, kxi_178324[0]);
		F.line = 47;
		add_167777(tmp_191556, tmp_191562);
		F.line = 48;
		var tmp_191569 = tree_169048(71, []);
		F.line = 48;
		add_167777(tmp_191556, tmp_191569);
		F.line = 48;
		add_167777(tmp_191518, tmp_191556);
		F.line = 49;
		var tmp_191575 = tree_169048(104, []);
		F.line = 50;
		add_167777(tmp_191575, text_169175(makeNimstrLit("Field size: ")));
		F.line = 51;
		var tmp_191581 = tree_169048(105, []);
		F.line = 51;
		tmp_191581.id = "field_size";
		F.line = 51;
		add_167777(tmp_191575, tmp_191581);
		F.line = 52;
		var tmp_191587 = tree_169048(71, []);
		F.line = 52;
		add_167777(tmp_191575, tmp_191587);
		F.line = 52;
		add_167777(tmp_191518, tmp_191575);
		F.line = 53;
		var tmp_191593 = tree_169048(106, []);
		F.line = 53;
		add_event_handler_188490(tmp_191593, 0, start_game_191458, kxi_178324[0]);
		F.line = 54;
		add_167777(tmp_191593, text_169175(makeNimstrLit("start Game")));
		F.line = 54;
		add_167777(tmp_191518, tmp_191593);
		F.line = 54;
		add_167777(tmp_191512, tmp_191518);
		result_191492 = tmp_191512;
	framePtr = F.prev;

	return result_191492;

}

function text_169201(s_169203) {
	var result_169204 = null;

	var F={procname:"vdom.text",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/vdom.nim",line:0};
	framePtr = F;
		F.line = 272;
		result_169204 = {kind: 0, text: s_169203, index: -1, m_type: NTI166705, id: null, class: null, kids: null, attrs: null, events: null, style: null, dom: null};
	framePtr = F.prev;

	return result_169204;

}

function click_field_191473(ev_191475, n_191476) {
	var F={procname:"karax_client.clickField",prev:framePtr,filename:"karax_client.nim",line:0};
	framePtr = F;
		F.line = 31;
		message_191226[0] = toJSStr(make_turn_143804(game_191223, cstrToNimstr(n_191476.id)));
		if ((message_191226[0] == "")) {
		F.line = 33;
		message_191226[0] = "playing";
		}
		
	framePtr = F.prev;

	
}

function to_disabled_188773(disabled_188775) {
		var Tmp1;

	var result_188776 = null;

	var F={procname:"karax.toDisabled",prev:framePtr,filename:"../../../../.nimble/pkgs/karax-1.1.0/karax/karax.nim",line:0};
	framePtr = F;
		F.line = 770;
		if (disabled_188775) {
		Tmp1 = "disabled";
		}
		else {
		Tmp1 = null;
		}
		
		result_188776 = Tmp1;
	framePtr = F.prev;

	return result_188776;

}

function play_gui_191622() {
										var Tmp7;
										var Tmp8;

		function HEX3Aanonymous_192015() {
			var F={procname:"playGUI.:anonymous",prev:framePtr,filename:"karax_client.nim",line:0};
			framePtr = F;
				F.line = 74;
				state_191225[0] = 1;
			framePtr = F.prev;

			
		}

		function HEX3Aanonymous_192037() {
			var F={procname:"playGUI.:anonymous",prev:framePtr,filename:"karax_client.nim",line:0};
			framePtr = F;
				F.line = 78;
				setup_143653(game_191223, settings_191423);
			framePtr = F.prev;

			
		}

	var result_191624 = null;

	var F={procname:"karax_client.playGUI",prev:framePtr,filename:"karax_client.nim",line:0};
	framePtr = F;
		F.line = 58;
		F.line = 58;
		var tmp_191637 = tree_169048(43, []);
		F.line = 58;
		tmp_191637.class = "center";
		F.line = 59;
		var tmp_191643 = tree_169048(43, []);
		F.line = 59;
		tmp_191643.id = "status";
		F.line = 60;
		add_167777(tmp_191643, text_169201(message_191226[0]));
		F.line = 60;
		add_167777(tmp_191637, tmp_191643);
		F.line = 63;
		var tmp_191649 = tree_169048(43, []);
		F.line = 63;
		tmp_191649.class = "grid-container";
		L1: do {
			F.line = 64;
			var i_191716 = 0;
			F.line = 64;
			var line_191717 = new Int32Array(3);
			F.line = 2333;
			var colontmp__192062 = [new Int32Array(3), new Int32Array(3), new Int32Array(3)];
			F.line = 64;
			nimCopy(colontmp__192062, field_143726(game_191223), NTI143723);
			F.line = 2335;
			var i_192065 = 0;
			if ((i_192065 <= 2)) {
			L2: do {
				F.line = 2337;
					L3: while (true) {
					if (!true) break L3;
						F.line = 2338;
						i_191716 = i_192065;
						F.line = 2338;
						nimCopy(line_191717, colontmp__192062[chckIndx(i_192065, 0, colontmp__192062.length+0-1)-0], NTI143722);
						L4: do {
							F.line = 65;
							var j_191784 = 0;
							F.line = 65;
							var field_191785 = 0;
							F.line = 2335;
							var i_192061 = 0;
							if ((i_192061 <= 2)) {
							L5: do {
								F.line = 2337;
									L6: while (true) {
									if (!true) break L6;
										F.line = 2338;
										j_191784 = i_192061;
										F.line = 2338;
										field_191785 = line_191717[chckIndx(i_192061, 0, line_191717.length+0-1)-0];
										F.line = 67;
										var tmp_191791 = tree_169048(106, []);
										F.line = 67;
										tmp_191791.class = "grid-item";
										F.line = 67;
										F.line = 67;
										var fmt_res_191794 = mnewString(0);
										F.line = 270;
										if (fmt_res_191794 != null) { fmt_res_191794 = (fmt_res_191794).concat(cstrToNimstr((addInt(i_191716, 1))+"")); } else { fmt_res_191794 = cstrToNimstr((addInt(i_191716, 1))+"").slice(); };
										F.line = 270;
										if (fmt_res_191794 != null) { fmt_res_191794 = (fmt_res_191794).concat(cstrToNimstr((addInt(j_191784, 1))+"")); } else { fmt_res_191794 = cstrToNimstr((addInt(j_191784, 1))+"").slice(); };
										tmp_191791.id = toJSStr(fmt_res_191794);
										F.line = 67;
										add_event_handler_188454(tmp_191791, 0, click_field_191473, kxi_178324[0]);
										F.line = 68;
										if ((state_191225[0] == 0)) Tmp8 = true; else {											Tmp8 = !((field_191785 == 0));										}										if (Tmp8) Tmp7 = true; else {											Tmp7 = finished_143840(game_191223);										}										set_attr_167549(tmp_191791, "disabled", to_disabled_188773(Tmp7));
										F.line = 69;
										add_167777(tmp_191791, text_169175(desc_143048[chckIndx(field_191785, 0, desc_143048.length+0-1)-0]));
										F.line = 69;
										add_167777(tmp_191649, tmp_191791);
										if ((2 <= i_192061)) {
										F.line = 2339;
										break L5;
										}
										
										F.line = 2340;
										i_192061 = addInt(i_192061, 1);
									}
							} while(false);
							}
							
						} while(false);
						if ((2 <= i_192065)) {
						F.line = 2339;
						break L2;
						}
						
						F.line = 2340;
						i_192065 = addInt(i_192065, 1);
					}
			} while(false);
			}
			
		} while(false);
		F.line = 69;
		add_167777(tmp_191637, tmp_191649);
		F.line = 70;
		var tmp_192007 = tree_169048(43, []);
		F.line = 70;
		tmp_192007.class = "command_buttons";
		F.line = 71;
		var tmp_192013 = tree_169048(106, []);
		F.line = 71;
		tmp_192013.class = "start";
		F.line = 72;
		add_167777(tmp_192013, text_169175(makeNimstrLit("setup")));
		F.line = 73;
		add_event_handler_188490(tmp_192013, 0, HEX3Aanonymous_192015, kxi_178324[0]);
		F.line = 73;
		add_167777(tmp_192007, tmp_192013);
		F.line = 75;
		var tmp_192035 = tree_169048(106, []);
		F.line = 75;
		tmp_192035.class = "reset";
		F.line = 75;
		tmp_192035.id = "reset";
		F.line = 76;
		add_167777(tmp_192035, text_169175(makeNimstrLit("reset")));
		F.line = 77;
		add_event_handler_188490(tmp_192035, 0, HEX3Aanonymous_192037, kxi_178324[0]);
		F.line = 77;
		add_167777(tmp_192007, tmp_192035);
		F.line = 77;
		add_167777(tmp_191637, tmp_192007);
		result_191624 = tmp_191637;
	framePtr = F.prev;

	return result_191624;

}

function create_dom_192083() {
				var Tmp1;

	var result_192085 = null;

	var F={procname:"karax_client.createDom",prev:framePtr,filename:"karax_client.nim",line:0};
	framePtr = F;
		F.line = 82;
		switch (state_191225[0]) {
		case 1:
			F.line = 84;
			result_192085 = setup_gui_191490();
			break;
		case 0:
			F.line = 86;
			result_192085 = play_gui_191622();
			break;
		case 2:
				if (eqStrings(settings_191423.name1, [])) Tmp1 = true; else {					Tmp1 = eqStrings(settings_191423.name2, []);				}			if (Tmp1) {
			F.line = 89;
			window.alert("fill out player names");
			F.line = 90;
			state_191225[0] = 1;
			F.line = 91;
			result_192085 = setup_gui_191490();
			}
			else {
				F.line = 93;
				result_192085 = play_gui_191622();
			}
			
			break;
		default: 
			break;
		}
	framePtr = F.prev;

	return result_192085;

}
set_renderer_188277(create_dom_192083, "ROOT", null);

function set_possible_moves_139055(self_139057, moves_139092) {
	var F={procname:"turn_based_game.set_possible_moves",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 2895;
		var e_140593 = null;
		F.line = 2896;
		e_140593 = {m_type: NTI3860, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 241;
		e_140593.message = nimCopy(null, makeNimstrLit("set_possible_moves(OrderedTable) must be overridden"), NTI138);
		F.line = 2891;
		e_140593.parent = null;
		F.line = 241;
		raiseException(e_140593, "FieldError");
	framePtr = F.prev;

	
}

function set_possible_moves_139094(self_139057, moves_139092) {
	var F={procname:"turn_based_game.set_possible_moves",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 173;
		set_possible_moves_139055(self_139057, moves_139092);
	framePtr = F.prev;

	
}

function sys_fatal_16979(message_16985) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2915;
		var e_16987 = null;
		F.line = 2916;
		e_16987 = {m_type: NTI3886, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 2917;
		e_16987.message = nimCopy(null, message_16985, NTI138);
		F.line = 2918;
		raiseException(e_16987, "NilAccessError");
	framePtr = F.prev;

	
}

function chckNilDisp(p_16976, p_16976_Idx) {
		if ((p_16976_Idx == 0)) {
		sys_fatal_16979(makeNimstrLit("cannot dispatch; dispatcher is nil"));
		}
		

	
}

function set_possible_moves_143151(self_143153, moves_143156, moves_143156_Idx) {
	var F={procname:"game_logic.set_possible_moves",prev:framePtr,filename:"game_logic.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 32;
			var y_143169 = 0;
			F.line = 2107;
			var res_143203 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_143203 <= 2)) break L3;
						F.line = 2109;
						y_143169 = res_143203;
						L4: do {
							F.line = 33;
							var x_143182 = 0;
							F.line = 2107;
							var res_143197 = 0;
							L5: do {
								F.line = 2108;
									L6: while (true) {
									if (!(res_143197 <= 2)) break L6;
										F.line = 2109;
										x_143182 = res_143197;
										if ((self_143153.field[chckIndx(x_143182, 0, self_143153.field.length+0-1)-0][chckIndx(y_143169, 0, self_143153.field[chckIndx(x_143182, 0, self_143153.field.length+0-1)-0].length+0-1)-0] == 0)) {
										F.line = 35;
										if (moves_143156[moves_143156_Idx] != null) { moves_143156[moves_143156_Idx].push((cstrToNimstr((addInt(x_143182, 1))+"")).concat(cstrToNimstr((addInt(y_143169, 1))+""))); } else { moves_143156[moves_143156_Idx] = [(cstrToNimstr((addInt(x_143182, 1))+"")).concat(cstrToNimstr((addInt(y_143169, 1))+""))]; };
										}
										
										F.line = 2110;
										res_143197 = addInt(res_143197, 1);
									}
							} while(false);
						} while(false);
						F.line = 2110;
						res_143203 = addInt(res_143203, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function set_possible_moves_139096(self_139098, moves_139101, moves_139101_Idx) {
	var F={procname:"turn_based_game.set_possible_moves",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 235;
		moves_139101[moves_139101_Idx] = nimCopy(null, [], NTI140561);
	framePtr = F.prev;

	
}

function set_possible_moves_139103(self_139098, moves_139101, moves_139101_Idx) {
	var F={procname:"turn_based_game.set_possible_moves",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 500;
		chckNilDisp(self_139098);
		if (isObj(self_139098.m_type, NTI143018)) {
		F.line = 174;
		set_possible_moves_143151(self_139098, moves_139101, moves_139101_Idx);
		}
		else {
		if (isObj(self_139098.m_type, NTI139018)) {
		F.line = 174;
		set_possible_moves_139096(self_139098, moves_139101, moves_139101_Idx);
		}
		else {
		if (isObj(self_139098.m_type, NTI139018)) {
		F.line = 174;
		set_possible_moves_139096(self_139098, moves_139101, moves_139101_Idx);
		}
		}}
	framePtr = F.prev;

	
}

function invalid_format_string_131000() {
		var e_131008 = null;
		e_131008 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_131008.message = nimCopy(null, makeNimstrLit("invalid format string"), NTI138);
		e_131008.parent = null;
		raiseException(e_131008, "ValueError");

	
}

function raiseRangeError() {
		var e_16125 = null;
		e_16125 = {m_type: NTI3862, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16125.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		e_16125.parent = null;
		raiseException(e_16125, "RangeError");

	
}

function nsuToLowerAsciiChar(c_123213) {
	var result_123214 = 0;

	var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet5[c_123213] != undefined)) {
		F.line = 259;
		result_123214 = chckRange(addInt(c_123213, 32), 0, 255);
		}
		else {
			F.line = 261;
			result_123214 = c_123213;
		}
		
	framePtr = F.prev;

	return result_123214;

}

function nsuCmpIgnoreStyle(a_123561, b_123562) {
					var Tmp7;
					var Tmp8;

	var result_123563 = 0;

	BeforeRet: do {
		var i_123565 = 0;
		var j_123567 = 0;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					L3: do {
							L4: while (true) {
							if (!((i_123565 < (a_123561 != null ? a_123561.length : 0)) && (a_123561[i_123565] == 95))) break L4;
								i_123565 += 1;
							}
					} while(false);
					L5: do {
							L6: while (true) {
							if (!((j_123567 < (b_123562 != null ? b_123562.length : 0)) && (b_123562[j_123567] == 95))) break L6;
								j_123567 += 1;
							}
					} while(false);
					if ((i_123565 < (a_123561 != null ? a_123561.length : 0))) {
					Tmp7 = nsuToLowerAsciiChar(a_123561[i_123565]);
					}
					else {
					Tmp7 = 0;
					}
					
					var aa_123586 = Tmp7;
					if ((j_123567 < (b_123562 != null ? b_123562.length : 0))) {
					Tmp8 = nsuToLowerAsciiChar(b_123562[j_123567]);
					}
					else {
					Tmp8 = 0;
					}
					
					var bb_123587 = Tmp8;
					result_123563 = (aa_123586 - bb_123587);
					if (!((result_123563 == 0))) {
					break BeforeRet;
					}
					
					if (((a_123561 != null ? a_123561.length : 0) <= i_123565)) {
					if (((b_123562 != null ? b_123562.length : 0) <= j_123567)) {
					result_123563 = 0;
					break BeforeRet;
					}
					
					result_123563 = -1;
					break BeforeRet;
					}
					else {
					if (((b_123562 != null ? b_123562.length : 0) <= j_123567)) {
					result_123563 = 1;
					break BeforeRet;
					}
					}
					i_123565 += 1;
					j_123567 += 1;
				}
		} while(false);
	} while (false);

	return result_123563;

}

function find_normalized_130961(x_130963, in_array_130965) {
	var result_130966 = 0;

	BeforeRet: do {
		var i_130968 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_130968 < (in_array_130965 != null ? (in_array_130965.length-1) : -1))) break L2;
					if ((nsuCmpIgnoreStyle(x_130963, in_array_130965[i_130968]) == 0)) {
					result_130966 = i_130968;
					break BeforeRet;
					}
					
					i_130968 += 2;
				}
		} while(false);
		result_130966 = -1;
		break BeforeRet;
	} while (false);

	return result_130966;

}

function substr_23422(s_23424, first_23425, last_23426) {
	var result_23427 = null;

	var F={procname:"system.substr",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 4263;
		var first_23428 = nimMax(first_23425, 0);
		F.line = 4264;
		var l_23430 = nimMax(addInt(subInt(nimMin(last_23426, (s_23424 != null ? (s_23424.length-1) : -1)), first_23428), 1), 0);
		F.line = 4265;
		result_23427 = nimCopy(null, mnewString(chckRange(l_23430, 0, 2147483647)), NTI138);
		L1: do {
			F.line = 4266;
			var i_23442 = 0;
			F.line = 2104;
			var colontmp__23444 = 0;
			F.line = 4266;
			colontmp__23444 = subInt(l_23430, 1);
			F.line = 2107;
			var res_23447 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_23447 <= colontmp__23444)) break L3;
						F.line = 2109;
						i_23442 = res_23447;
						F.line = 4267;
						result_23427[chckIndx(i_23442, 0, result_23427.length+0-1)-0] = s_23424[chckIndx(addInt(i_23442, first_23428), 0, s_23424.length+0-1)-0];
						F.line = 2110;
						res_23447 = addInt(res_23447, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_23427;

}

function nsuAddf(s_131033, s_131033_Idx, formatstr_131034, a_131036) {
									var Tmp5;
						var Tmp6;
							var Tmp7;
						var Tmp10;
							var Tmp11;
								var Tmp12;
									var Tmp15;
							var Tmp16;

		var i_131040 = 0;
		var num_131042 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_131040 < (formatstr_131034 != null ? formatstr_131034.length : 0))) break L2;
					if (((formatstr_131034[i_131040] == 36) && ((i_131040 + 1) < (formatstr_131034 != null ? formatstr_131034.length : 0)))) {
					switch (formatstr_131034[(i_131040 + 1)]) {
					case 35:
						if (((a_131036 != null ? (a_131036.length-1) : -1) < num_131042)) {
						invalid_format_string_131000();
						}
						
						if (s_131033[s_131033_Idx] != null) { s_131033[s_131033_Idx] = (s_131033[s_131033_Idx]).concat(a_131036[num_131042]); } else { s_131033[s_131033_Idx] = a_131036[num_131042].slice(); };
						i_131040 += 2;
						num_131042 += 1;
						break;
					case 36:
						if (s_131033[s_131033_Idx] != null) { addChar(s_131033[s_131033_Idx], 36); } else { s_131033[s_131033_Idx] = [36]; };
						i_131040 += 2;
						break;
					case 49:
					case 50:
					case 51:
					case 52:
					case 53:
					case 54:
					case 55:
					case 56:
					case 57:
					case 45:
						var j_131078 = 0;
						i_131040 += 1;
						var negative_131088 = (formatstr_131034[i_131040] == 45);
						if (negative_131088) {
						i_131040 += 1;
						}
						
						L3: do {
								L4: while (true) {
									if (!(i_131040 < (formatstr_131034 != null ? formatstr_131034.length : 0))) Tmp5 = false; else {										Tmp5 = (ConstSet2[formatstr_131034[i_131040]] != undefined);									}								if (!Tmp5) break L4;
									j_131078 = (((j_131078 * 10) + formatstr_131034[i_131040]) - 48);
									i_131040 += 1;
								}
						} while(false);
						if (!(negative_131088)) {
						Tmp6 = (j_131078 - 1);
						}
						else {
						Tmp6 = ((a_131036 != null ? a_131036.length : 0) - j_131078);
						}
						
						var idx_131134 = Tmp6;
							if ((idx_131134 < 0)) Tmp7 = true; else {								Tmp7 = ((a_131036 != null ? (a_131036.length-1) : -1) < idx_131134);							}						if (Tmp7) {
						invalid_format_string_131000();
						}
						
						if (s_131033[s_131033_Idx] != null) { s_131033[s_131033_Idx] = (s_131033[s_131033_Idx]).concat(a_131036[idx_131134]); } else { s_131033[s_131033_Idx] = a_131036[idx_131134].slice(); };
						break;
					case 123:
						var j_131142 = (i_131040 + 2);
						var k_131144 = 0;
						var negative_131145 = (formatstr_131034[j_131142] == 45);
						if (negative_131145) {
						j_131142 += 1;
						}
						
						var is_number_131156 = 0;
						L8: do {
								L9: while (true) {
								if (!((j_131142 < (formatstr_131034 != null ? formatstr_131034.length : 0)) && !((ConstSet3[formatstr_131034[j_131142]] != undefined)))) break L9;
									if ((ConstSet4[formatstr_131034[j_131142]] != undefined)) {
									k_131144 = (((k_131144 * 10) + formatstr_131034[j_131142]) - 48);
									if ((is_number_131156 == 0)) {
									is_number_131156 = 1;
									}
									
									}
									else {
										is_number_131156 = -1;
									}
									
									j_131142 += 1;
								}
						} while(false);
						if ((is_number_131156 == 1)) {
						if (!(negative_131145)) {
						Tmp10 = (k_131144 - 1);
						}
						else {
						Tmp10 = ((a_131036 != null ? a_131036.length : 0) - k_131144);
						}
						
						var idx_131204 = Tmp10;
							if ((idx_131204 < 0)) Tmp11 = true; else {								Tmp11 = ((a_131036 != null ? (a_131036.length-1) : -1) < idx_131204);							}						if (Tmp11) {
						invalid_format_string_131000();
						}
						
						if (s_131033[s_131033_Idx] != null) { s_131033[s_131033_Idx] = (s_131033[s_131033_Idx]).concat(a_131036[idx_131204]); } else { s_131033[s_131033_Idx] = a_131036[idx_131204].slice(); };
						}
						else {
							var x_131212 = find_normalized_130961(substr_23422(formatstr_131034, (i_131040 + 2), (j_131142 - 1)), a_131036);
								if (!(0 <= x_131212)) Tmp12 = false; else {									Tmp12 = (x_131212 < (a_131036 != null ? (a_131036.length-1) : -1));								}							if (Tmp12) {
							if (s_131033[s_131033_Idx] != null) { s_131033[s_131033_Idx] = (s_131033[s_131033_Idx]).concat(a_131036[(x_131212 + 1)]); } else { s_131033[s_131033_Idx] = a_131036[(x_131212 + 1)].slice(); };
							}
							else {
							invalid_format_string_131000();
							}
							
						}
						
						i_131040 = (j_131142 + 1);
						break;
					case 97:
					case 98:
					case 99:
					case 100:
					case 101:
					case 102:
					case 103:
					case 104:
					case 105:
					case 106:
					case 107:
					case 108:
					case 109:
					case 110:
					case 111:
					case 112:
					case 113:
					case 114:
					case 115:
					case 116:
					case 117:
					case 118:
					case 119:
					case 120:
					case 121:
					case 122:
					case 65:
					case 66:
					case 67:
					case 68:
					case 69:
					case 70:
					case 71:
					case 72:
					case 73:
					case 74:
					case 75:
					case 76:
					case 77:
					case 78:
					case 79:
					case 80:
					case 81:
					case 82:
					case 83:
					case 84:
					case 85:
					case 86:
					case 87:
					case 88:
					case 89:
					case 90:
					case 128:
					case 129:
					case 130:
					case 131:
					case 132:
					case 133:
					case 134:
					case 135:
					case 136:
					case 137:
					case 138:
					case 139:
					case 140:
					case 141:
					case 142:
					case 143:
					case 144:
					case 145:
					case 146:
					case 147:
					case 148:
					case 149:
					case 150:
					case 151:
					case 152:
					case 153:
					case 154:
					case 155:
					case 156:
					case 157:
					case 158:
					case 159:
					case 160:
					case 161:
					case 162:
					case 163:
					case 164:
					case 165:
					case 166:
					case 167:
					case 168:
					case 169:
					case 170:
					case 171:
					case 172:
					case 173:
					case 174:
					case 175:
					case 176:
					case 177:
					case 178:
					case 179:
					case 180:
					case 181:
					case 182:
					case 183:
					case 184:
					case 185:
					case 186:
					case 187:
					case 188:
					case 189:
					case 190:
					case 191:
					case 192:
					case 193:
					case 194:
					case 195:
					case 196:
					case 197:
					case 198:
					case 199:
					case 200:
					case 201:
					case 202:
					case 203:
					case 204:
					case 205:
					case 206:
					case 207:
					case 208:
					case 209:
					case 210:
					case 211:
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 226:
					case 227:
					case 228:
					case 229:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
					case 236:
					case 237:
					case 238:
					case 239:
					case 240:
					case 241:
					case 242:
					case 243:
					case 244:
					case 245:
					case 246:
					case 247:
					case 248:
					case 249:
					case 250:
					case 251:
					case 252:
					case 253:
					case 254:
					case 255:
					case 95:
						var j_131221 = (i_131040 + 1);
						L13: do {
								L14: while (true) {
									if (!(j_131221 < (formatstr_131034 != null ? formatstr_131034.length : 0))) Tmp15 = false; else {										Tmp15 = (ConstSet6[formatstr_131034[j_131221]] != undefined);									}								if (!Tmp15) break L14;
									j_131221 += 1;
								}
						} while(false);
						var x_131240 = find_normalized_130961(substr_23422(formatstr_131034, (i_131040 + 1), (j_131221 - 1)), a_131036);
							if (!(0 <= x_131240)) Tmp16 = false; else {								Tmp16 = (x_131240 < (a_131036 != null ? (a_131036.length-1) : -1));							}						if (Tmp16) {
						if (s_131033[s_131033_Idx] != null) { s_131033[s_131033_Idx] = (s_131033[s_131033_Idx]).concat(a_131036[(x_131240 + 1)]); } else { s_131033[s_131033_Idx] = a_131036[(x_131240 + 1)].slice(); };
						}
						else {
						invalid_format_string_131000();
						}
						
						i_131040 = j_131221;
						break;
					default: 
						invalid_format_string_131000();
						break;
					}
					}
					else {
						if (s_131033[s_131033_Idx] != null) { addChar(s_131033[s_131033_Idx], formatstr_131034[i_131040]); } else { s_131033[s_131033_Idx] = [formatstr_131034[i_131040]]; };
						i_131040 += 1;
					}
					
				}
		} while(false);

	
}

function nsuFormatVarargs(formatstr_131334, a_131336) {
	var result_131337 = [null];

		result_131337[0] = nimCopy(null, mnewString(0), NTI138);
		nsuAddf(result_131337, 0, formatstr_131334, a_131336);

	return result_131337[0];

}

function status_143421(self_143423) {
	var result_143424 = null;

	var F={procname:"game_logic.status",prev:framePtr,filename:"game_logic.nim",line:0};
	framePtr = F;
		F.line = 67;
		rawEcho(makeNimstrLit("  1  2  3"));
		L1: do {
			F.line = 68;
			var y_143440 = 0;
			F.line = 2107;
			var res_143471 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_143471 <= 2)) break L3;
						F.line = 2109;
						y_143440 = res_143471;
						F.line = 69;
						var line_143441 = cstrToNimstr((addInt(y_143440, 1))+"");
						L4: do {
							F.line = 70;
							var x_143454 = 0;
							F.line = 2107;
							var res_143465 = 0;
							L5: do {
								F.line = 2108;
									L6: while (true) {
									if (!(res_143465 <= 2)) break L6;
										F.line = 2109;
										x_143454 = res_143465;
										F.line = 71;
										if (line_143441 != null) { line_143441 = (line_143441).concat(nsuFormatVarargs(makeNimstrLit("[$1]"), [desc_143048[chckIndx(self_143423.field[chckIndx(x_143454, 0, self_143423.field.length+0-1)-0][chckIndx(y_143440, 0, self_143423.field[chckIndx(x_143454, 0, self_143423.field.length+0-1)-0].length+0-1)-0], 0, desc_143048.length+0-1)-0]])); } else { line_143441 = nsuFormatVarargs(makeNimstrLit("[$1]"), [desc_143048[chckIndx(self_143423.field[chckIndx(x_143454, 0, self_143423.field.length+0-1)-0][chckIndx(y_143440, 0, self_143423.field[chckIndx(x_143454, 0, self_143423.field.length+0-1)-0].length+0-1)-0], 0, desc_143048.length+0-1)-0]]).slice(); };
										F.line = 2110;
										res_143465 = addInt(res_143465, 1);
									}
							} while(false);
						} while(false);
						F.line = 72;
						rawEcho(line_143441);
						F.line = 2110;
						res_143471 = addInt(res_143471, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_143424;

}

function is_over_140750(self_140752) {
	var result_140753 = false;

	var F={procname:"turn_based_game.is_over",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 286;
		result_140753 = !((self_140752.winner_player_number == 0));
	framePtr = F.prev;

	return result_140753;

}

function is_over_140755(self_140752) {
	var result_140758 = false;

	var F={procname:"turn_based_game.is_over",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 285;
		result_140758 = is_over_140750(self_140752);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_140758;

}

function status_139105(self_139107) {
	var result_140775 = null;

	var F={procname:"turn_based_game.status",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (is_over_140755(self_139107)) {
		F.line = 295;
		result_140775 = nimCopy(null, makeNimstrLit("game is over"), NTI138);
		break BeforeRet;
		}
		else {
			F.line = 297;
			result_140775 = nimCopy(null, makeNimstrLit("game is active"), NTI138);
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_140775;

}

function status_139109(self_139107) {
	var result_140775 = null;

	var F={procname:"turn_based_game.status",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 500;
		chckNilDisp(self_139107);
		if (isObj(self_139107.m_type, NTI143018)) {
		F.line = 175;
		result_140775 = status_143421(self_139107);
		break BeforeRet;
		}
		else {
		if (isObj(self_139107.m_type, NTI139018)) {
		F.line = 175;
		result_140775 = status_139105(self_139107);
		break BeforeRet;
		}
		else {
		if (isObj(self_139107.m_type, NTI139018)) {
		F.line = 175;
		result_140775 = status_139105(self_139107);
		break BeforeRet;
		}
		}}
	} while (false);
	framePtr = F.prev;

	return result_140775;

}

function display_139111(self_139113, msg_139114) {
	var F={procname:"turn_based_game.display",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 185;
		rawEcho(msg_139114);
	framePtr = F.prev;

	
}

function display_139116(self_139113, msg_139114) {
	var F={procname:"turn_based_game.display",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 184;
		display_139111(self_139113, msg_139114);
	framePtr = F.prev;

	
}

function scoring_143602(self_143604) {
	var result_143605 = 0.0;

	var F={procname:"game_logic.scoring",prev:framePtr,filename:"game_logic.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 85;
			var line_143615 = new Int32Array(3);
			F.line = 2259;
			var colontmp__143631 = [new Int32Array(3), new Int32Array(3), new Int32Array(3)];
			F.line = 85;
			nimCopy(colontmp__143631, self_143604.field, NTI143024);
			F.line = 2261;
			var i_143634 = 0;
			if ((i_143634 <= 2)) {
			L2: do {
				F.line = 2263;
					L3: while (true) {
					if (!true) break L3;
						F.line = 2264;
						nimCopy(line_143615, colontmp__143631[chckIndx(i_143634, 0, colontmp__143631.length+0-1)-0], NTI143023);
						L4: do {
							F.line = 86;
							var square_143625 = 0;
							F.line = 2261;
							var i_143630 = 0;
							if ((i_143630 <= 2)) {
							L5: do {
								F.line = 2263;
									L6: while (true) {
									if (!true) break L6;
										F.line = 2264;
										square_143625 = line_143615[chckIndx(i_143630, 0, line_143615.length+0-1)-0];
										if ((square_143625 == self_143604.current_player_number)) {
										}
										
										if ((2 <= i_143630)) {
										F.line = 2265;
										break L5;
										}
										
										F.line = 2266;
										i_143630 = addInt(i_143630, 1);
									}
							} while(false);
							}
							
						} while(false);
						if ((2 <= i_143634)) {
						F.line = 2265;
						break L2;
						}
						
						F.line = 2266;
						i_143634 = addInt(i_143634, 1);
					}
			} while(false);
			}
			
		} while(false);
	framePtr = F.prev;

	return result_143605;

}

function scoring_140823(self_140825) {
	var result_140826 = 0.0;

	var F={procname:"turn_based_game.scoring",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 2895;
		var e_140838 = null;
		F.line = 2896;
		e_140838 = {m_type: NTI3860, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 313;
		e_140838.message = nimCopy(null, makeNimstrLit("scoring() must be overridden (if used)"), NTI138);
		F.line = 2891;
		e_140838.parent = null;
		F.line = 313;
		raiseException(e_140838, "FieldError");
	framePtr = F.prev;

	return result_140826;

}

function scoring_140828(self_140825) {
	var result_140831 = 0.0;

	var F={procname:"turn_based_game.scoring",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 500;
		chckNilDisp(self_140825);
		if (isObj(self_140825.m_type, NTI143018)) {
		F.line = 308;
		result_140831 = scoring_143602(self_140825);
		break BeforeRet;
		}
		else {
		if (isObj(self_140825.m_type, NTI139018)) {
		F.line = 308;
		result_140831 = scoring_140823(self_140825);
		break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_140831;

}

function get_state_143488(self_143490) {
	var result_143491 = null;

	var F={procname:"game_logic.get_state",prev:framePtr,filename:"game_logic.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 75;
			var y_143504 = 0;
			F.line = 2107;
			var res_143528 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_143528 <= 2)) break L3;
						F.line = 2109;
						y_143504 = res_143528;
						L4: do {
							F.line = 76;
							var x_143517 = 0;
							F.line = 2107;
							var res_143522 = 0;
							L5: do {
								F.line = 2108;
									L6: while (true) {
									if (!(res_143522 <= 2)) break L6;
										F.line = 2109;
										x_143517 = res_143522;
										F.line = 77;
										if (result_143491 != null) { result_143491 = (result_143491).concat(cstrToNimstr((self_143490.field[chckIndx(x_143517, 0, self_143490.field.length+0-1)-0][chckIndx(y_143504, 0, self_143490.field[chckIndx(x_143517, 0, self_143490.field.length+0-1)-0].length+0-1)-0])+"")); } else { result_143491 = cstrToNimstr((self_143490.field[chckIndx(x_143517, 0, self_143490.field.length+0-1)-0][chckIndx(y_143504, 0, self_143490.field[chckIndx(x_143517, 0, self_143490.field.length+0-1)-0].length+0-1)-0])+"").slice(); };
										F.line = 2110;
										res_143522 = addInt(res_143522, 1);
									}
							} while(false);
						} while(false);
						F.line = 2110;
						res_143528 = addInt(res_143528, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_143491;

}

function get_state_140860(self_140862) {
	var result_140863 = null;

	var F={procname:"turn_based_game.get_state",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 2895;
		var e_140875 = null;
		F.line = 2896;
		e_140875 = {m_type: NTI3860, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 322;
		e_140875.message = nimCopy(null, makeNimstrLit("get_state() must be overridden (if used)"), NTI138);
		F.line = 2891;
		e_140875.parent = null;
		F.line = 322;
		raiseException(e_140875, "FieldError");
	framePtr = F.prev;

	return result_140863;

}

function get_state_140865(self_140862) {
	var result_140868 = null;

	var F={procname:"turn_based_game.get_state",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 500;
		chckNilDisp(self_140862);
		if (isObj(self_140862.m_type, NTI143018)) {
		F.line = 316;
		result_140868 = get_state_143488(self_140862);
		break BeforeRet;
		}
		else {
		if (isObj(self_140862.m_type, NTI139018)) {
		F.line = 316;
		result_140868 = get_state_140860(self_140862);
		break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_140868;

}

function raw_parse_int_27307(s_27309, b_27311, b_27311_Idx, start_27312) {
			var Tmp1;
					var Tmp4;

	var result_27314 = 0;

	var F={procname:"parseutils.rawParseInt",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/parseutils.nim",line:0};
	framePtr = F;
		F.line = 249;
		var sign_27316 = -1;
		F.line = 250;
		var i_27317 = start_27312;
		if ((i_27317 < (s_27309 != null ? s_27309.length : 0))) {
		if ((s_27309[chckIndx(i_27317, 0, s_27309.length+0-1)-0] == 43)) {
		F.line = 252;
		i_27317 = addInt(i_27317, 1);
		}
		else {
		if ((s_27309[chckIndx(i_27317, 0, s_27309.length+0-1)-0] == 45)) {
		F.line = 254;
		i_27317 = addInt(i_27317, 1);
		F.line = 255;
		sign_27316 = 1;
		}
		}
		}
		
			if (!(i_27317 < (s_27309 != null ? s_27309.length : 0))) Tmp1 = false; else {				Tmp1 = (ConstSet7[s_27309[chckIndx(i_27317, 0, s_27309.length+0-1)-0]] != undefined);			}		if (Tmp1) {
		F.line = 257;
		b_27311[b_27311_Idx] = 0;
		L2: do {
			F.line = 258;
				L3: while (true) {
					if (!(i_27317 < (s_27309 != null ? s_27309.length : 0))) Tmp4 = false; else {						Tmp4 = (ConstSet8[s_27309[chckIndx(i_27317, 0, s_27309.length+0-1)-0]] != undefined);					}				if (!Tmp4) break L3;
					F.line = 259;
					b_27311[b_27311_Idx] = subInt(mulInt(b_27311[b_27311_Idx], 10), subInt(s_27309[chckIndx(i_27317, 0, s_27309.length+0-1)-0], 48));
					F.line = 260;
					i_27317 = addInt(i_27317, 1);
					L5: do {
						F.line = 261;
							L6: while (true) {
							if (!((i_27317 < (s_27309 != null ? s_27309.length : 0)) && (s_27309[chckIndx(i_27317, 0, s_27309.length+0-1)-0] == 95))) break L6;
								F.line = 261;
								i_27317 = addInt(i_27317, 1);
							}
					} while(false);
				}
		} while(false);
		F.line = 262;
		b_27311[b_27311_Idx] = mulInt(b_27311[b_27311_Idx], sign_27316);
		F.line = 263;
		result_27314 = subInt(i_27317, start_27312);
		}
		
	framePtr = F.prev;

	return result_27314;

}

function npuParseBiggestInt(s_27403, number_27405, number_27405_Idx, start_27406) {
	var result_27408 = 0;

	var F={procname:"parseutils.parseBiggestInt",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/parseutils.nim",line:0};
	framePtr = F;
		F.line = 271;
		var res_27409 = [0];
		F.line = 274;
		result_27408 = raw_parse_int_27307(s_27403, res_27409, 0, start_27406);
		F.line = 275;
		number_27405[number_27405_Idx] = res_27409[0];
	framePtr = F.prev;

	return result_27408;

}

function npuParseInt(s_27426, number_27428, number_27428_Idx, start_27429) {
			var Tmp1;
				var Tmp2;

	var result_27431 = 0;

	var F={procname:"parseutils.parseInt",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/parseutils.nim",line:0};
	framePtr = F;
		F.line = 282;
		var res_27432 = [0];
		F.line = 283;
		result_27431 = npuParseBiggestInt(s_27426, res_27432, 0, start_27429);
			if (!true) Tmp1 = false; else {				if ((res_27432[0] < -2147483648)) Tmp2 = true; else {					Tmp2 = (2147483647 < res_27432[0]);				}				Tmp1 = Tmp2;			}		if (Tmp1) {
		F.line = 2895;
		var e_27459 = null;
		F.line = 2896;
		e_27459 = {m_type: NTI3846, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 286;
		e_27459.message = nimCopy(null, makeNimstrLit("overflow"), NTI138);
		F.line = 2891;
		e_27459.parent = null;
		F.line = 286;
		raiseException(e_27459, "OverflowError");
		}
		else {
		if (!((result_27431 == 0))) {
		F.line = 288;
		number_27428[number_27428_Idx] = chckRange(res_27432[0], -2147483648, 2147483647);
		}
		}
	framePtr = F.prev;

	return result_27431;

}

function nsuParseInt(s_125490) {
			var Tmp1;

	var result_125491 = [0];

		var l_125493 = npuParseInt(s_125490, result_125491, 0, 0);
			if (!((l_125493 == (s_125490 != null ? s_125490.length : 0)))) Tmp1 = true; else {				Tmp1 = (l_125493 == 0);			}		if (Tmp1) {
		var e_125500 = null;
		e_125500 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_125500.message = nimCopy(null, (makeNimstrLit("invalid integer: ")).concat(s_125490), NTI138);
		e_125500.parent = null;
		raiseException(e_125500, "ValueError");
		}
		

	return result_125491[0];

}

function make_move_143220(self_143222, move_143223) {
	var result_143224 = null;

	var F={procname:"game_logic.make_move",prev:framePtr,filename:"game_logic.nim",line:0};
	framePtr = F;
		F.line = 39;
		self_143222.field[chckIndx(subInt(nsuParseInt(nimCharToStr(move_143223[chckIndx(0, 0, move_143223.length+0-1)-0])), 1), 0, self_143222.field.length+0-1)-0][chckIndx(subInt(nsuParseInt(nimCharToStr(move_143223[chckIndx(1, 0, move_143223.length+0-1)-0])), 1), 0, self_143222.field[chckIndx(subInt(nsuParseInt(nimCharToStr(move_143223[chckIndx(0, 0, move_143223.length+0-1)-0])), 1), 0, self_143222.field.length+0-1)-0].length+0-1)-0] = self_143222.current_player_number;
		F.line = 40;
		result_143224 = nimCopy(null, (makeNimstrLit("set mark at ")).concat(move_143223), NTI138);
	framePtr = F.prev;

	return result_143224;

}

function make_move_140712(self_140714, move_140715) {
	var result_140716 = null;

	var F={procname:"turn_based_game.make_move",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 2895;
		var e_140728 = null;
		F.line = 2896;
		e_140728 = {m_type: NTI3860, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 282;
		e_140728.message = nimCopy(null, makeNimstrLit("make_move() must be overridden"), NTI138);
		F.line = 2891;
		e_140728.parent = null;
		F.line = 282;
		raiseException(e_140728, "FieldError");
	framePtr = F.prev;

	return result_140716;

}

function make_move_140718(self_140714, move_140715) {
	var result_140721 = null;

	var F={procname:"turn_based_game.make_move",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 500;
		chckNilDisp(self_140714);
		if (isObj(self_140714.m_type, NTI143018)) {
		F.line = 274;
		result_140721 = make_move_143220(self_140714, move_140715);
		break BeforeRet;
		}
		else {
		if (isObj(self_140714.m_type, NTI139018)) {
		F.line = 274;
		result_140721 = make_move_140712(self_140714, move_140715);
		break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_140721;

}

function next_player_number_140663(self_140665) {
	var result_140666 = 0;

	var F={procname:"turn_based_game.next_player_number",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 262;
		result_140666 = addInt((self_140665.current_player_number % self_140665.player_count), 1);
	framePtr = F.prev;

	return result_140666;

}

function next_player_number_140668(self_140665) {
	var result_140671 = 0;

	var F={procname:"turn_based_game.next_player_number",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 261;
		result_140671 = next_player_number_140663(self_140665);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_140671;

}

function finish_turn_140693(self_140695) {
	var F={procname:"turn_based_game.finish_turn",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 271;
		self_140695.current_player_number = next_player_number_140668(self_140695);
	framePtr = F.prev;

	
}

function finish_turn_140697(self_140695) {
	var F={procname:"turn_based_game.finish_turn",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 266;
		finish_turn_140693(self_140695);
	framePtr = F.prev;

	
}

function restore_state_143545(self_143547, state_143548) {
	var F={procname:"game_logic.restore_state",prev:framePtr,filename:"game_logic.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 80;
			var y_143561 = 0;
			F.line = 2107;
			var res_143585 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_143585 <= 2)) break L3;
						F.line = 2109;
						y_143561 = res_143585;
						L4: do {
							F.line = 81;
							var x_143574 = 0;
							F.line = 2107;
							var res_143579 = 0;
							L5: do {
								F.line = 2108;
									L6: while (true) {
									if (!(res_143579 <= 2)) break L6;
										F.line = 2109;
										x_143574 = res_143579;
										F.line = 82;
										self_143547.field[chckIndx(x_143574, 0, self_143547.field.length+0-1)-0][chckIndx(y_143561, 0, self_143547.field[chckIndx(x_143574, 0, self_143547.field.length+0-1)-0].length+0-1)-0] = nsuParseInt(nimCharToStr(state_143548[chckIndx(addInt(mulInt(y_143561, 3), x_143574), 0, state_143548.length+0-1)-0]));
										F.line = 2110;
										res_143579 = addInt(res_143579, 1);
									}
							} while(false);
						} while(false);
						F.line = 2110;
						res_143585 = addInt(res_143585, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function restore_state_140897(self_140899, state_140900) {
	var F={procname:"turn_based_game.restore_state",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 2895;
		var e_140910 = null;
		F.line = 2896;
		e_140910 = {m_type: NTI3860, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 330;
		e_140910.message = nimCopy(null, makeNimstrLit("restore_state() must be overridden (if used)"), NTI138);
		F.line = 2891;
		e_140910.parent = null;
		F.line = 330;
		raiseException(e_140910, "FieldError");
	framePtr = F.prev;

	
}

function restore_state_140902(self_140899, state_140900) {
	var F={procname:"turn_based_game.restore_state",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 500;
		chckNilDisp(self_140899);
		if (isObj(self_140899.m_type, NTI143018)) {
		F.line = 325;
		restore_state_143545(self_140899, state_140900);
		}
		else {
		if (isObj(self_140899.m_type, NTI139018)) {
		F.line = 325;
		restore_state_140897(self_140899, state_140900);
		}
		}
	framePtr = F.prev;

	
}

function negamax_core_142042(game_142045, game_142045_Idx, ai_choice_142047, ai_choice_142047_Idx, depth_142048, orig_depth_142049, alpha_in_142050, beta_in_142051) {
			var Tmp1;
			var Tmp2;

	var result_142052 = 0.0;

	var F={procname:"negamax.negamax_core",prev:framePtr,filename:"../../../../.nimble/pkgs/negamax-0.0.2/negamax.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 9;
		var possible_moves_142069 = [nimCopy(null, [], NTI142068)];
		F.line = 10;
		var starting_state_142070 = null;
		F.line = 11;
		var move_alpha_142071 = 0.0;
		F.line = 12;
		var alpha_142072 = alpha_in_142050;
		F.line = 13;
		var beta_142073 = beta_in_142051;
		F.line = 16;
		set_possible_moves_139103(game_142045[game_142045_Idx], possible_moves_142069, 0);
			if ((depth_142048 == 0)) Tmp2 = true; else {				Tmp2 = is_over_140755(game_142045[game_142045_Idx]);			}			if (Tmp2) Tmp1 = true; else {				Tmp1 = ((possible_moves_142069[0] != null ? possible_moves_142069[0].length : 0) == 0);			}		if (Tmp1) {
		F.line = 21;
		var score_142082 = scoring_140828(game_142045[game_142045_Idx]);
		if ((score_142082 == 0.0)) {
		F.line = 24;
		result_142052 = score_142082;
		break BeforeRet;
		}
		else {
			F.line = 26;
			result_142052 = (score_142082 - (((1.0000000000000000e-02 * depth_142048) * Math.abs(score_142082)) / score_142082));
			break BeforeRet;
		}
		
		}
		
		F.line = 30;
		starting_state_142070 = nimCopy(null, get_state_140865(game_142045[game_142045_Idx]), NTI138);
		F.line = 35;
		var best_move_142083 = nimCopy(null, possible_moves_142069[0][chckIndx(0, 0, possible_moves_142069[0].length+0-1)-0], NTI138);
		F.line = 36;
		var best_value_142084 = -Infinity;
		L3: do {
			F.line = 38;
			var move_142093 = null;
			F.line = 3911;
			var i_142098 = 0;
			F.line = 3912;
			var l_142100 = (possible_moves_142069[0] != null ? possible_moves_142069[0].length : 0);
			L4: do {
				F.line = 3913;
					L5: while (true) {
					if (!(i_142098 < l_142100)) break L5;
						F.line = 3914;
						move_142093 = possible_moves_142069[0][chckIndx(i_142098, 0, possible_moves_142069[0].length+0-1)-0];
						F.line = 42;
						make_move_140718(game_142045[game_142045_Idx], move_142093);
						F.line = 43;
						finish_turn_140697(game_142045[game_142045_Idx]);
						F.line = 47;
						move_alpha_142071 = -(negamax_core_142042(game_142045, game_142045_Idx, ai_choice_142047, ai_choice_142047_Idx, subInt(depth_142048, 1), orig_depth_142049, -(beta_142073), -(alpha_142072)));
						F.line = 56;
						restore_state_140902(game_142045[game_142045_Idx], starting_state_142070);
						if ((best_value_142084 < move_alpha_142071)) {
						F.line = 61;
						best_value_142084 = move_alpha_142071;
						F.line = 62;
						best_move_142083 = nimCopy(null, move_142093, NTI138);
						}
						
						if ((alpha_142072 < move_alpha_142071)) {
						F.line = 64;
						alpha_142072 = move_alpha_142071;
						if ((depth_142048 == orig_depth_142049)) {
						F.line = 66;
						ai_choice_142047[ai_choice_142047_Idx] = nimCopy(null, best_move_142083, NTI138);
						}
						
						if ((beta_142073 <= alpha_142072)) {
						F.line = 68;
						break L3;
						}
						
						}
						
						F.line = 3915;
						i_142098 = addInt(i_142098, 1);
						if (!(((possible_moves_142069[0] != null ? possible_moves_142069[0].length : 0) == l_142100))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/manuel/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 70;
		result_142052 = best_value_142084;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_142052;

}

function negamax_142114(game_142117, game_142117_Idx, depth_142118) {
	var result_142119 = null;

	var F={procname:"negamax.negamax",prev:framePtr,filename:"../../../../.nimble/pkgs/negamax-0.0.2/negamax.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 76;
		var alpha_142120 = 0.0;
		F.line = 77;
		var beta_142121 = 0.0;
		F.line = 78;
		var ai_choice_142122 = [null];
		F.line = 79;
		var possible_moves_142139 = [nimCopy(null, [], NTI142138)];
		F.line = 81;
		alpha_142120 = -Infinity;
		F.line = 82;
		beta_142121 = Infinity;
		F.line = 86;
		set_possible_moves_139103(game_142117[game_142117_Idx], possible_moves_142139, 0);
		if (((possible_moves_142139[0] != null ? possible_moves_142139[0].length : 0) == 0)) {
		F.line = 88;
		result_142119 = nimCopy(null, [], NTI138);
		break BeforeRet;
		}
		
		F.line = 89;
		ai_choice_142122[0] = nimCopy(null, possible_moves_142139[0][chckIndx(0, 0, possible_moves_142139[0].length+0-1)-0], NTI138);
		F.line = 91;
		alpha_142120 = negamax_core_142042(game_142117, game_142117_Idx, ai_choice_142122, 0, depth_142118, depth_142118, alpha_142120, beta_142121);
		F.line = 99;
		result_142119 = nimCopy(null, ai_choice_142122[0], NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_142119;

}

function get_move_142170(self_142172, game_142173) {
	var result_142174 = null;

	var F={procname:"negamax.get_move",prev:framePtr,filename:"../../../../.nimble/pkgs/negamax-0.0.2/negamax.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 110;
		var new_game_142175 = [null];
		F.line = 112;
		new_game_142175[0] = game_142173;
		F.line = 115;
		var choice_142202 = negamax_142114(new_game_142175, 0, self_142172.depth);
		F.line = 116;
		result_142174 = nimCopy(null, choice_142202, NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_142174;

}

function nsuIndent(s_126663, count_126664, padding_126665) {
						var Tmp6;

	var result_126666 = null;

		result_126666 = nimCopy(null, [], NTI138);
		var i_126668 = 0;
		L1: do {
			var line_126669 = null;
			var first_126703 = 0;
			var last_126705 = 0;
			var eolpos_126707 = 0;
			L2: do {
					L3: while (true) {
					if (!true) break L3;
						L4: do {
								L5: while (true) {
								if (!((last_126705 < (s_126663 != null ? s_126663.length : 0)) && !((ConstSet9[s_126663[last_126705]] != undefined)))) break L5;
									last_126705 += 1;
								}
						} while(false);
						eolpos_126707 = last_126705;
						if ((last_126705 < (s_126663 != null ? s_126663.length : 0))) {
						if ((s_126663[last_126705] == 10)) {
						last_126705 += 1;
						}
						else {
						if ((s_126663[last_126705] == 13)) {
						last_126705 += 1;
						if (((last_126705 < (s_126663 != null ? s_126663.length : 0)) && (s_126663[last_126705] == 10))) {
						last_126705 += 1;
						}
						
						}
						}
						}
						
						if (false) {
						Tmp6 = (last_126705 - 1);
						}
						else {
						Tmp6 = (eolpos_126707 - 1);
						}
						
						line_126669 = substr_23422(s_126663, first_126703, Tmp6);
						if (!((i_126668 == 0))) {
						if (result_126666 != null) { result_126666 = (result_126666).concat(makeNimstrLit("\x0A")); } else { result_126666 = makeNimstrLit("\x0A"); };
						}
						
						L7: do {
							var j_126681 = 0;
							var colontmp__126693 = 0;
							colontmp__126693 = count_126664;
							var res_126696 = 1;
							L8: do {
									L9: while (true) {
									if (!(res_126696 <= colontmp__126693)) break L9;
										j_126681 = res_126696;
										if (result_126666 != null) { result_126666 = (result_126666).concat(padding_126665); } else { result_126666 = padding_126665.slice(); };
										res_126696 += 1;
									}
							} while(false);
						} while(false);
						if (result_126666 != null) { result_126666 = (result_126666).concat(line_126669); } else { result_126666 = line_126669.slice(); };
						i_126668 += 1;
						if ((eolpos_126707 == last_126705)) {
						break L2;
						}
						
						first_126703 = last_126705;
					}
			} while(false);
		} while(false);

	return result_126666;

}

function is_filled_135491(hcode_135493) {
	var result_135494 = false;

	var F={procname:"tables.isFilled",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 18;
		result_135494 = !((hcode_135493 == 0));
	framePtr = F.prev;

	return result_135494;

}

function find_140413(a_140418, item_140420) {
	var result_140421 = 0;

	var F={procname:"find.find",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 2511;
			var i_140460 = null;
			F.line = 2247;
			var i_140476 = 0;
			L2: do {
				F.line = 2248;
					L3: while (true) {
					if (!(i_140476 < (a_140418 != null ? a_140418.length : 0))) break L3;
						F.line = 2249;
						i_140460 = a_140418[chckIndx(i_140476, 0, a_140418.length+0-1)-0];
						if (eqStrings(i_140460, item_140420)) {
						F.line = 2512;
						break BeforeRet;
						}
						
						F.line = 2513;
						result_140421 = addInt(result_140421, 1);
						F.line = 2250;
						i_140476 = addInt(i_140476, 1);
					}
			} while(false);
		} while(false);
		F.line = 2514;
		result_140421 = -1;
	} while (false);
	framePtr = F.prev;

	return result_140421;

}

function contains_140403(a_140408, item_140410) {
	var result_140411 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 2519;
		result_140411 = (0 <= find_140413(a_140408, item_140410));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_140411;

}

function get_move_139135(self_139137, game_139138) {
	var result_139139 = null;

	var F={procname:"turn_based_game.get_move",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 189;
		var move_list_139161 = [nimCopy(null, [], NTI139160)];
		F.line = 190;
		var descriptive_move_list_139169 = [{data: null, counter: 0, first: 0, last: 0}];
		F.line = 191;
		var compact_description_139170 = false;
		F.line = 192;
		rawEcho([]);
		F.line = 193;
		rawEcho(makeNimstrLit("   Status:"));
		F.line = 194;
		rawEcho(nsuIndent(status_139109(game_139138), 2, makeNimstrLit("   ")));
		F.line = 195;
		set_possible_moves_139103(game_139138, move_list_139161, 0);
		if ((0 < (move_list_139161[0] != null ? move_list_139161[0].length : 0))) {
		F.line = 197;
		compact_description_139170 = true;
		}
		else {
			F.line = 199;
			set_possible_moves_139094(game_139138, descriptive_move_list_139169[0]);
			L1: do {
				F.line = 200;
				var key_140086 = null;
				F.line = 200;
				var value_140087 = null;
				F.line = 540;
				var h_140512 = descriptive_move_list_139169[0].first;
				L2: do {
					F.line = 549;
						L3: while (true) {
						if (!(0 <= h_140512)) break L3;
							F.line = 542;
							var nxt_140514 = descriptive_move_list_139169[0].data[chckIndx(h_140512, 0, descriptive_move_list_139169[0].data.length+0-1)-0].Field1;
							if (is_filled_135491(descriptive_move_list_139169[0].data[chckIndx(h_140512, 0, descriptive_move_list_139169[0].data.length+0-1)-0].Field0)) {
							F.line = 550;
							key_140086 = descriptive_move_list_139169[0].data[chckIndx(h_140512, 0, descriptive_move_list_139169[0].data.length+0-1)-0].Field2;
							F.line = 550;
							value_140087 = descriptive_move_list_139169[0].data[chckIndx(h_140512, 0, descriptive_move_list_139169[0].data.length+0-1)-0].Field3;
							F.line = 201;
							var Tmp4 = nimCopy(null, key_140086, NTI138);
							if (move_list_139161[0] != null) { move_list_139161[0].push(Tmp4); } else { move_list_139161[0] = [Tmp4]; };
							}
							
							F.line = 544;
							h_140512 = nxt_140514;
						}
				} while(false);
			} while(false);
		}
		
		L5: do {
			F.line = 202;
				L6: while (true) {
				if (!true) break L6;
					F.line = 203;
					rawEcho(makeNimstrLit("   Possible moves:"));
					if (compact_description_139170) {
					F.line = 205;
					var disp_140101 = makeNimstrLit("      ");
					L7: do {
						F.line = 206;
						var key_140215 = null;
						F.line = 3911;
						var i_140519 = 0;
						F.line = 3912;
						var l_140521 = (move_list_139161[0] != null ? move_list_139161[0].length : 0);
						L8: do {
							F.line = 3913;
								L9: while (true) {
								if (!(i_140519 < l_140521)) break L9;
									F.line = 3914;
									key_140215 = move_list_139161[0][chckIndx(i_140519, 0, move_list_139161[0].length+0-1)-0];
									F.line = 207;
									if (disp_140101 != null) { disp_140101 = (disp_140101).concat(nsuFormatVarargs(makeNimstrLit("[$#] "), [key_140215])); } else { disp_140101 = nsuFormatVarargs(makeNimstrLit("[$#] "), [key_140215]).slice(); };
									F.line = 3915;
									i_140519 = addInt(i_140519, 1);
									if (!(((move_list_139161[0] != null ? move_list_139161[0].length : 0) == l_140521))) {
									F.line = 3916;
									failed_assert_impl_20481(makeNimstrLit("/home/manuel/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
									}
									
								}
						} while(false);
					} while(false);
					F.line = 208;
					rawEcho(disp_140101);
					}
					else {
						L10: do {
							F.line = 210;
							var key_140231 = null;
							F.line = 210;
							var value_140232 = null;
							F.line = 540;
							var h_140525 = descriptive_move_list_139169[0].first;
							L11: do {
								F.line = 549;
									L12: while (true) {
									if (!(0 <= h_140525)) break L12;
										F.line = 542;
										var nxt_140527 = descriptive_move_list_139169[0].data[chckIndx(h_140525, 0, descriptive_move_list_139169[0].data.length+0-1)-0].Field1;
										if (is_filled_135491(descriptive_move_list_139169[0].data[chckIndx(h_140525, 0, descriptive_move_list_139169[0].data.length+0-1)-0].Field0)) {
										F.line = 550;
										key_140231 = descriptive_move_list_139169[0].data[chckIndx(h_140525, 0, descriptive_move_list_139169[0].data.length+0-1)-0].Field2;
										F.line = 550;
										value_140232 = descriptive_move_list_139169[0].data[chckIndx(h_140525, 0, descriptive_move_list_139169[0].data.length+0-1)-0].Field3;
										F.line = 211;
										rawEcho((makeNimstrLit("      ")).concat(nsuFormatVarargs(makeNimstrLit("[$key]: $value"), [makeNimstrLit("key"), key_140231, makeNimstrLit("value"), value_140232])));
										}
										
										F.line = 544;
										h_140525 = nxt_140527;
									}
							} while(false);
						} while(false);
					}
					
					F.line = 212;
					rawEcho(makeNimstrLit("   Enter move (or \'quit\'): "));
					F.line = 213;
					var response_140245 = null;
					F.line = 216;
					response_140245 = nimCopy(null, makeNimstrLit("When compiling for Javascript, you cannot use this procedure."), NTI138);
					if (contains_140403(move_list_139161[0], response_140245)) {
					F.line = 220;
					result_139139 = nimCopy(null, response_140245, NTI138);
					break BeforeRet;
					}
					
					if (eqStrings(response_140245, makeNimstrLit("quit"))) {
					F.line = 222;
					result_139139 = nimCopy(null, [], NTI138);
					break BeforeRet;
					}
					
					F.line = 223;
					rawEcho(makeNimstrLit("   BAD ENTRY. Try again."));
				}
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_139139;

}

function get_move_139141(self_139137, game_139138) {
	var result_139144 = null;

	var F={procname:"turn_based_game.get_move",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 500;
		chckNilDisp(self_139137);
		if (isObj(self_139137.m_type, NTI142164)) {
		F.line = 188;
		result_139144 = get_move_142170(self_139137, game_139138);
		break BeforeRet;
		}
		else {
		if (isObj(self_139137.m_type, NTI139025)) {
		F.line = 188;
		result_139144 = get_move_139135(self_139137, game_139138);
		break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_139144;

}

function current_player_140615(self_140617) {
	var result_140618 = null;

	var F={procname:"turn_based_game.current_player",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 245;
		result_140618 = self_140617.players[chckIndx(subInt(self_140617.current_player_number, 1), 0, self_140617.players.length+0-1)-0];
	framePtr = F.prev;

	return result_140618;

}

function current_player_140620(self_140617) {
	var result_140623 = null;

	var F={procname:"turn_based_game.current_player",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 244;
		result_140623 = current_player_140615(self_140617);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_140623;

}

function winning_player_140637(self_140639) {
	var result_140640 = null;

	var F={procname:"turn_based_game.winning_player",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((0 < self_140639.winner_player_number)) {
		F.line = 254;
		result_140640 = self_140639.players[chckIndx(subInt(self_140639.winner_player_number, 1), 0, self_140639.players.length+0-1)-0];
		break BeforeRet;
		}
		else {
		if ((self_140639.winner_player_number == 0)) {
		F.line = 256;
		result_140640 = {name: makeNimstrLit("NO WINNER YET"), m_type: NTI139025};
		break BeforeRet;
		}
		else {
			F.line = 258;
			result_140640 = {name: makeNimstrLit("STALEMATE OR TIE"), m_type: NTI139025};
			break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_140640;

}

function winning_player_140642(self_140639) {
	var result_140645 = null;

	var F={procname:"turn_based_game.winning_player",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 249;
		result_140645 = winning_player_140637(self_140639);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_140645;

}

function determine_winner_143238(self_143240) {
							var Tmp4;
							var Tmp5;
							var Tmp9;
							var Tmp10;

	var F={procname:"game_logic.determine_winner",prev:framePtr,filename:"game_logic.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((self_143240.winner_player_number == 0))) {
		F.line = 45;
		break BeforeRet;
		}
		
		L1: do {
			F.line = 46;
			var line_143301 = new Int32Array(3);
			F.line = 2259;
			var colontmp__143388 = [new Int32Array(3), new Int32Array(3), new Int32Array(3)];
			F.line = 46;
			nimCopy(colontmp__143388, self_143240.field, NTI143024);
			F.line = 2261;
			var i_143391 = 0;
			if ((i_143391 <= 2)) {
			L2: do {
				F.line = 2263;
					L3: while (true) {
					if (!true) break L3;
						F.line = 2264;
						nimCopy(line_143301, colontmp__143388[chckIndx(i_143391, 0, colontmp__143388.length+0-1)-0], NTI143023);
							if (!!((line_143301[chckIndx(0, 0, line_143301.length+0-1)-0] == 0))) Tmp5 = false; else {								Tmp5 = (line_143301[chckIndx(0, 0, line_143301.length+0-1)-0] == line_143301[chckIndx(1, 0, line_143301.length+0-1)-0]);							}							if (!Tmp5) Tmp4 = false; else {								Tmp4 = (line_143301[chckIndx(1, 0, line_143301.length+0-1)-0] == line_143301[chckIndx(2, 0, line_143301.length+0-1)-0]);							}						if (Tmp4) {
						F.line = 49;
						self_143240.winner_player_number = line_143301[chckIndx(0, 0, line_143301.length+0-1)-0];
						F.line = 50;
						break BeforeRet;
						}
						
						if ((2 <= i_143391)) {
						F.line = 2265;
						break L2;
						}
						
						F.line = 2266;
						i_143391 = addInt(i_143391, 1);
					}
			} while(false);
			}
			
		} while(false);
		L6: do {
			F.line = 51;
			var i_143314 = 0;
			F.line = 2107;
			var res_143395 = 0;
			L7: do {
				F.line = 2108;
					L8: while (true) {
					if (!(res_143395 <= 2)) break L8;
						F.line = 2109;
						i_143314 = res_143395;
							if (!!((self_143240.field[chckIndx(0, 0, self_143240.field.length+0-1)-0][chckIndx(i_143314, 0, self_143240.field[chckIndx(0, 0, self_143240.field.length+0-1)-0].length+0-1)-0] == 0))) Tmp10 = false; else {								Tmp10 = (self_143240.field[chckIndx(0, 0, self_143240.field.length+0-1)-0][chckIndx(i_143314, 0, self_143240.field[chckIndx(0, 0, self_143240.field.length+0-1)-0].length+0-1)-0] == self_143240.field[chckIndx(1, 0, self_143240.field.length+0-1)-0][chckIndx(i_143314, 0, self_143240.field[chckIndx(1, 0, self_143240.field.length+0-1)-0].length+0-1)-0]);							}							if (!Tmp10) Tmp9 = false; else {								Tmp9 = (self_143240.field[chckIndx(1, 0, self_143240.field.length+0-1)-0][chckIndx(i_143314, 0, self_143240.field[chckIndx(1, 0, self_143240.field.length+0-1)-0].length+0-1)-0] == self_143240.field[chckIndx(2, 0, self_143240.field.length+0-1)-0][chckIndx(i_143314, 0, self_143240.field[chckIndx(2, 0, self_143240.field.length+0-1)-0].length+0-1)-0]);							}						if (Tmp9) {
						F.line = 54;
						self_143240.winner_player_number = self_143240.field[chckIndx(0, 0, self_143240.field.length+0-1)-0][chckIndx(i_143314, 0, self_143240.field[chckIndx(0, 0, self_143240.field.length+0-1)-0].length+0-1)-0];
						F.line = 55;
						break BeforeRet;
						}
						
						F.line = 2110;
						res_143395 = addInt(res_143395, 1);
					}
			} while(false);
		} while(false);
		F.line = 57;
		var stale_mate_143315 = true;
		L11: do {
			F.line = 58;
			var line_143325 = new Int32Array(3);
			F.line = 2259;
			var colontmp__143404 = [new Int32Array(3), new Int32Array(3), new Int32Array(3)];
			F.line = 58;
			nimCopy(colontmp__143404, self_143240.field, NTI143024);
			F.line = 2261;
			var i_143407 = 0;
			if ((i_143407 <= 2)) {
			L12: do {
				F.line = 2263;
					L13: while (true) {
					if (!true) break L13;
						F.line = 2264;
						nimCopy(line_143325, colontmp__143404[chckIndx(i_143407, 0, colontmp__143404.length+0-1)-0], NTI143023);
						L14: do {
							F.line = 59;
							var square_143386 = 0;
							F.line = 2261;
							var i_143403 = 0;
							if ((i_143403 <= 2)) {
							L15: do {
								F.line = 2263;
									L16: while (true) {
									if (!true) break L16;
										F.line = 2264;
										square_143386 = line_143325[chckIndx(i_143403, 0, line_143325.length+0-1)-0];
										if ((square_143386 == 0)) {
										F.line = 61;
										stale_mate_143315 = false;
										}
										
										if ((2 <= i_143403)) {
										F.line = 2265;
										break L15;
										}
										
										F.line = 2266;
										i_143403 = addInt(i_143403, 1);
									}
							} while(false);
							}
							
						} while(false);
						if ((2 <= i_143407)) {
						F.line = 2265;
						break L12;
						}
						
						F.line = 2266;
						i_143407 = addInt(i_143407, 1);
					}
			} while(false);
			}
			
		} while(false);
		if (stale_mate_143315) {
		F.line = 63;
		self_143240.winner_player_number = -1;
		}
		
	} while (false);
	framePtr = F.prev;

	
}

function determine_winner_140789(self_140791) {
	var F={procname:"turn_based_game.determine_winner",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 2895;
		var e_140801 = null;
		F.line = 2896;
		e_140801 = {m_type: NTI3860, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 305;
		e_140801.message = nimCopy(null, makeNimstrLit("determine_winner() must be overridden"), NTI138);
		F.line = 2891;
		e_140801.parent = null;
		F.line = 305;
		raiseException(e_140801, "FieldError");
	framePtr = F.prev;

	
}

function determine_winner_140793(self_140791) {
	var F={procname:"turn_based_game.determine_winner",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 500;
		chckNilDisp(self_140791);
		if (isObj(self_140791.m_type, NTI143018)) {
		F.line = 300;
		determine_winner_143238(self_140791);
		}
		else {
		if (isObj(self_140791.m_type, NTI139018)) {
		F.line = 300;
		determine_winner_140789(self_140791);
		}
		}
	framePtr = F.prev;

	
}

function default_setup_140968(self_140970, players_140972) {
	var F={procname:"turn_based_game.default_setup",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 353;
		self_140970.players = nimCopy(null, players_140972, NTI140971);
		F.line = 354;
		self_140970.player_count = (self_140970.players != null ? self_140970.players.length : 0);
		F.line = 355;
		self_140970.current_player_number = 1;
		F.line = 356;
		self_140970.winner_player_number = 0;
	framePtr = F.prev;

	
}

function default_setup_140974(self_140970, players_140972) {
	var F={procname:"turn_based_game.default_setup",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 340;
		default_setup_140968(self_140970, players_140972);
	framePtr = F.prev;

	
}

function reset_field_143074(self_143076) {
	var F={procname:"game_logic.resetField",prev:framePtr,filename:"game_logic.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 21;
			var y_143092 = 0;
			F.line = 2107;
			var res_143116 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_143116 <= 2)) break L3;
						F.line = 2109;
						y_143092 = res_143116;
						L4: do {
							F.line = 22;
							var x_143105 = 0;
							F.line = 2107;
							var res_143110 = 0;
							L5: do {
								F.line = 2108;
									L6: while (true) {
									if (!(res_143110 <= 2)) break L6;
										F.line = 2109;
										x_143105 = res_143110;
										F.line = 23;
										self_143076.field[chckIndx(x_143105, 0, self_143076.field.length+0-1)-0][chckIndx(y_143092, 0, self_143076.field[chckIndx(x_143105, 0, self_143076.field.length+0-1)-0].length+0-1)-0] = 0;
										F.line = 2110;
										res_143110 = addInt(res_143110, 1);
									}
							} while(false);
						} while(false);
						F.line = 2110;
						res_143116 = addInt(res_143116, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function reset_field_143078(self_143076) {
	var F={procname:"game_logic.resetField",prev:framePtr,filename:"game_logic.nim",line:0};
	framePtr = F;
		F.line = 20;
		reset_field_143074(self_143076);
	framePtr = F.prev;

	
}

function setup_143133(self_143135, players_143137) {
	var F={procname:"game_logic.setup",prev:framePtr,filename:"game_logic.nim",line:0};
	framePtr = F;
		F.line = 27;
		default_setup_140974(self_143135, players_143137);
		F.line = 28;
		reset_field_143078(self_143135);
	framePtr = F.prev;

	
}

function setup_140932(self_140934, players_140936) {
	var F={procname:"turn_based_game.setup",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 2895;
		var e_140946 = null;
		F.line = 2896;
		e_140946 = {m_type: NTI3860, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 337;
		e_140946.message = nimCopy(null, makeNimstrLit("setup() must be overridden"), NTI138);
		F.line = 2891;
		e_140946.parent = null;
		F.line = 337;
		raiseException(e_140946, "FieldError");
	framePtr = F.prev;

	
}

function setup_140938(self_140934, players_140936) {
	var F={procname:"turn_based_game.setup",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 500;
		chckNilDisp(self_140934);
		if (isObj(self_140934.m_type, NTI143018)) {
		F.line = 333;
		setup_143133(self_140934, players_140936);
		}
		else {
		if (isObj(self_140934.m_type, NTI139018)) {
		F.line = 333;
		setup_140932(self_140934, players_140936);
		}
		}
	framePtr = F.prev;

	
}

function play_140996(self_140998) {
	var result_141000 = null;

	var F={procname:"turn_based_game.play",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 362;
		result_141000 = nimCopy(null, [], NTI141020);
		F.line = 363;
		var move_141021 = [];
		L1: do {
			F.line = 364;
				L2: while (true) {
				if (!!(is_over_140755(self_140998))) break L2;
					F.line = 365;
					display_139116(current_player_140620(self_140998), makeNimstrLit("-----------------"));
					F.line = 366;
					display_139116(current_player_140620(self_140998), nsuFormatVarargs(makeNimstrLit("$1\'s Turn"), [current_player_140620(self_140998).name]));
					F.line = 367;
					move_141021 = nimCopy(null, get_move_139141(current_player_140620(self_140998), self_140998), NTI138);
					if (eqStrings(move_141021, [])) {
					F.line = 369;
					break L1;
					}
					
					F.line = 370;
					var Tmp3 = nimCopy(null, move_141021, NTI138);
					if (result_141000 != null) { result_141000.push(Tmp3); } else { result_141000 = [Tmp3]; };
					F.line = 371;
					display_139116(current_player_140620(self_140998), []);
					F.line = 372;
					display_139116(current_player_140620(self_140998), (makeNimstrLit("   ")).concat(make_move_140718(self_140998, move_141021)));
					F.line = 373;
					determine_winner_140793(self_140998);
					if (is_over_140755(self_140998)) {
					F.line = 375;
					display_139116(current_player_140620(self_140998), []);
					if ((self_140998.winner_player_number == -1)) {
					F.line = 377;
					display_139116(current_player_140620(self_140998), makeNimstrLit("STALEMATE."));
					}
					else {
						F.line = 379;
					display_139116(current_player_140620(self_140998), nsuFormatVarargs(makeNimstrLit("WINNER IS $#"), [winning_player_140642(self_140998).name]));
					}
					
					F.line = 380;
					break L1;
					}
					
					F.line = 381;
					self_140998.current_player_number = next_player_number_140668(self_140998);
				}
		} while(false);
	framePtr = F.prev;

	return result_141000;

}

function play_141002(self_140998) {
	var result_141005 = null;

	var F={procname:"turn_based_game.play",prev:framePtr,filename:"../../../../.nimble/pkgs/turn_based_game-1.1.3/turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 359;
		result_141005 = play_140996(self_140998);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_141005;

}

function setup_143648(self_143650, s_143651) {
	var F={procname:"game_logic.setup",prev:framePtr,filename:"game_logic.nim",line:0};
	framePtr = F;
		if (s_143651.ai) {
		F.line = 94;
		setup_140938(self_143650, [{name: nimCopy(null, s_143651.name1, NTI138), m_type: NTI139025}, {name: makeNimstrLit("ai"), m_type: NTI142164, depth: 0}]);
		}
		else {
			F.line = 96;
		setup_140938(self_143650, [{name: nimCopy(null, s_143651.name1, NTI138), m_type: NTI139025}, {name: nimCopy(null, s_143651.name2, NTI138), m_type: NTI139025}]);
		}
		
	framePtr = F.prev;

	
}

function setup_143653(self_143650, s_143651) {
	var F={procname:"game_logic.setup",prev:framePtr,filename:"game_logic.nim",line:0};
	framePtr = F;
		F.line = 92;
		setup_143648(self_143650, s_143651);
	framePtr = F.prev;

	
}

function play_on_cli_143696(self_143698) {
	var F={procname:"game_logic.playOnCli",prev:framePtr,filename:"game_logic.nim",line:0};
	framePtr = F;
		play_141002(self_143698);
	framePtr = F.prev;

	
}

function play_on_cli_143700(self_143698) {
	var F={procname:"game_logic.playOnCli",prev:framePtr,filename:"game_logic.nim",line:0};
	framePtr = F;
		F.line = 98;
		play_on_cli_143696(self_143698);
	framePtr = F.prev;

	
}

function field_143715(self_143717) {
	var result_143724 = [new Int32Array(3), new Int32Array(3), new Int32Array(3)];

	var F={procname:"game_logic.field",prev:framePtr,filename:"game_logic.nim",line:0};
	framePtr = F;
		F.line = 102;
		nimCopy(result_143724, self_143717.field, NTI143024);
	framePtr = F.prev;

	return result_143724;

}

function field_143726(self_143717) {
	var result_143729 = [new Int32Array(3), new Int32Array(3), new Int32Array(3)];

	var F={procname:"game_logic.field",prev:framePtr,filename:"game_logic.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 101;
		nimCopy(result_143729, field_143715(self_143717), NTI143723);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_143729;

}

function size_143743(self_143745) {
	var result_143746 = 0;

	var F={procname:"game_logic.size",prev:framePtr,filename:"game_logic.nim",line:0};
	framePtr = F;
		F.line = 105;
		result_143746 = self_143745.size;
	framePtr = F.prev;

	return result_143746;

}

function size_143748(self_143745) {
	var result_143751 = 0;

	var F={procname:"game_logic.size",prev:framePtr,filename:"game_logic.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 104;
		result_143751 = size_143743(self_143745);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_143751;

}

function get_player_143765(self_143767) {
		var Tmp1;

	var result_143768 = null;

	var F={procname:"game_logic.getPlayer",prev:framePtr,filename:"game_logic.nim",line:0};
	framePtr = F;
		F.line = 109;
		if ((current_player_140620(self_143767) == null)) {
		Tmp1 = makeNimstrLit("Game is not setup yet");
		}
		else {
		Tmp1 = current_player_140620(self_143767).name;
		}
		
		result_143768 = nimCopy(null, Tmp1, NTI138);
	framePtr = F.prev;

	return result_143768;

}

function get_player_143770(self_143767) {
	var result_143773 = null;

	var F={procname:"game_logic.getPlayer",prev:framePtr,filename:"game_logic.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 108;
		result_143773 = get_player_143765(self_143767);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_143773;

}

function make_turn_143798(self_143800, move_143801) {
	var result_143802 = null;

	var F={procname:"game_logic.make_turn",prev:framePtr,filename:"game_logic.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (is_over_140755(self_143800)) {
		F.line = 117;
		result_143802 = nimCopy(null, makeNimstrLit("Game is Over"), NTI138);
		break BeforeRet;
		}
		
		F.line = 118;
		make_move_140718(self_143800, move_143801);
		F.line = 119;
		determine_winner_140793(self_143800);
		if (is_over_140755(self_143800)) {
		if ((self_143800.winner_player_number == -1)) {
		F.line = 122;
		result_143802 = nimCopy(null, makeNimstrLit("STALEMATE"), NTI138);
		}
		else {
			F.line = 124;
			result_143802 = nimCopy(null, nsuFormatVarargs(makeNimstrLit("WINNER IS $#"), [winning_player_140642(self_143800).name]), NTI138);
		}
		
		F.line = 125;
		break BeforeRet;
		}
		
		F.line = 126;
		finish_turn_140697(self_143800);
		if (isObj(current_player_140620(self_143800).m_type, NTI142164)) {
		F.line = 129;
		make_move_140718(self_143800, get_move_139141(current_player_140620(self_143800), self_143800));
		F.line = 130;
		finish_turn_140697(self_143800);
		}
		
	} while (false);
	framePtr = F.prev;

	return result_143802;

}

function make_turn_143804(self_143800, move_143801) {
	var result_143807 = null;

	var F={procname:"game_logic.make_turn",prev:framePtr,filename:"game_logic.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 115;
		result_143807 = make_turn_143798(self_143800, move_143801);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_143807;

}

function finished_143835(self_143837) {
	var result_143838 = false;

	var F={procname:"game_logic.finished",prev:framePtr,filename:"game_logic.nim",line:0};
	framePtr = F;
		F.line = 133;
		result_143838 = is_over_140755(self_143837);
	framePtr = F.prev;

	return result_143838;

}

function finished_143840(self_143837) {
	var result_143843 = false;

	var F={procname:"game_logic.finished",prev:framePtr,filename:"game_logic.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 132;
		result_143843 = finished_143835(self_143837);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_143843;

}
